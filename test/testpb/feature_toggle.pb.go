// Generated by tableauc 0.1.0. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: feature_toggle.proto

package testpb

import (
	_ "github.com/Wenchy/tableau/proto/tableaupb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ToggleCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureToggleMap map[int32]*ToggleCfg_FeatureToggle `protobuf:"bytes,1,rep,name=feature_toggle_map,json=featureToggleMap,proto3" json:"feature_toggle_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ToggleCfg) Reset() {
	*x = ToggleCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleCfg) ProtoMessage() {}

func (x *ToggleCfg) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleCfg.ProtoReflect.Descriptor instead.
func (*ToggleCfg) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{0}
}

func (x *ToggleCfg) GetFeatureToggleMap() map[int32]*ToggleCfg_FeatureToggle {
	if x != nil {
		return x.FeatureToggleMap
	}
	return nil
}

type ToggleCfg_FeatureToggle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureToggleEnvId                int32  `protobuf:"varint,1,opt,name=feature_toggle_env_id,json=featureToggleEnvId,proto3" json:"feature_toggle_env_id,omitempty"`
	FeatureToggleToggleId             string `protobuf:"bytes,2,opt,name=feature_toggle_toggle_id,json=featureToggleToggleId,proto3" json:"feature_toggle_toggle_id,omitempty"`
	FeatureToggleToggleOpenRate       int32  `protobuf:"varint,3,opt,name=feature_toggle_toggle_open_rate,json=featureToggleToggleOpenRate,proto3" json:"feature_toggle_toggle_open_rate,omitempty"`
	FeatureToggleToggleWorldId        int32  `protobuf:"varint,4,opt,name=feature_toggle_toggle_world_id,json=featureToggleToggleWorldId,proto3" json:"feature_toggle_toggle_world_id,omitempty"`
	FeatureToggleToggleZoneId         int32  `protobuf:"varint,5,opt,name=feature_toggle_toggle_zone_id,json=featureToggleToggleZoneId,proto3" json:"feature_toggle_toggle_zone_id,omitempty"`
	FeatureToggleToggleOpenTime       string `protobuf:"bytes,6,opt,name=feature_toggle_toggle_open_time,json=featureToggleToggleOpenTime,proto3" json:"feature_toggle_toggle_open_time,omitempty"`
	FeatureToggleToggleCloseTime      string `protobuf:"bytes,7,opt,name=feature_toggle_toggle_close_time,json=featureToggleToggleCloseTime,proto3" json:"feature_toggle_toggle_close_time,omitempty"`
	FeatureToggleToggleUserLimitType  int32  `protobuf:"varint,8,opt,name=feature_toggle_toggle_user_limit_type,json=featureToggleToggleUserLimitType,proto3" json:"feature_toggle_toggle_user_limit_type,omitempty"`
	FeatureToggleToggleUserSourceType int32  `protobuf:"varint,9,opt,name=feature_toggle_toggle_user_source_type,json=featureToggleToggleUserSourceType,proto3" json:"feature_toggle_toggle_user_source_type,omitempty"`
	FeatureToggleToggleSysKey_1       int32  `protobuf:"varint,10,opt,name=feature_toggle_toggle_sys_key_1,json=featureToggleToggleSysKey1,proto3" json:"feature_toggle_toggle_sys_key_1,omitempty"`
	FeatureToggleToggleSysKey_2       int32  `protobuf:"varint,11,opt,name=feature_toggle_toggle_sys_key_2,json=featureToggleToggleSysKey2,proto3" json:"feature_toggle_toggle_sys_key_2,omitempty"`
	FeatureToggleToggleSysKey_3       int32  `protobuf:"varint,12,opt,name=feature_toggle_toggle_sys_key_3,json=featureToggleToggleSysKey3,proto3" json:"feature_toggle_toggle_sys_key_3,omitempty"`
	FeatureToggleToggleNotifyClosed   int32  `protobuf:"varint,13,opt,name=feature_toggle_toggle_notify_closed,json=featureToggleToggleNotifyClosed,proto3" json:"feature_toggle_toggle_notify_closed,omitempty"`
	FeatureToggleToggleErrCode        string `protobuf:"bytes,14,opt,name=feature_toggle_toggle_err_code,json=featureToggleToggleErrCode,proto3" json:"feature_toggle_toggle_err_code,omitempty"`
	FeatureToggleTogglename           string `protobuf:"bytes,15,opt,name=feature_toggle_togglename,json=featureToggleTogglename,proto3" json:"feature_toggle_togglename,omitempty"`
}

func (x *ToggleCfg_FeatureToggle) Reset() {
	*x = ToggleCfg_FeatureToggle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleCfg_FeatureToggle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleCfg_FeatureToggle) ProtoMessage() {}

func (x *ToggleCfg_FeatureToggle) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleCfg_FeatureToggle.ProtoReflect.Descriptor instead.
func (*ToggleCfg_FeatureToggle) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleEnvId() int32 {
	if x != nil {
		return x.FeatureToggleEnvId
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleId() string {
	if x != nil {
		return x.FeatureToggleToggleId
	}
	return ""
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleOpenRate() int32 {
	if x != nil {
		return x.FeatureToggleToggleOpenRate
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleWorldId() int32 {
	if x != nil {
		return x.FeatureToggleToggleWorldId
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleZoneId() int32 {
	if x != nil {
		return x.FeatureToggleToggleZoneId
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleOpenTime() string {
	if x != nil {
		return x.FeatureToggleToggleOpenTime
	}
	return ""
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleCloseTime() string {
	if x != nil {
		return x.FeatureToggleToggleCloseTime
	}
	return ""
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleUserLimitType() int32 {
	if x != nil {
		return x.FeatureToggleToggleUserLimitType
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleUserSourceType() int32 {
	if x != nil {
		return x.FeatureToggleToggleUserSourceType
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleSysKey_1() int32 {
	if x != nil {
		return x.FeatureToggleToggleSysKey_1
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleSysKey_2() int32 {
	if x != nil {
		return x.FeatureToggleToggleSysKey_2
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleSysKey_3() int32 {
	if x != nil {
		return x.FeatureToggleToggleSysKey_3
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleNotifyClosed() int32 {
	if x != nil {
		return x.FeatureToggleToggleNotifyClosed
	}
	return 0
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleToggleErrCode() string {
	if x != nil {
		return x.FeatureToggleToggleErrCode
	}
	return ""
}

func (x *ToggleCfg_FeatureToggle) GetFeatureToggleTogglename() string {
	if x != nil {
		return x.FeatureToggleTogglename
	}
	return ""
}

var File_feature_toggle_proto protoreflect.FileDescriptor

var file_feature_toggle_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x1a,
	0x1e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9d, 0x0e, 0x0a, 0x09, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x12, 0x70, 0x0a,
	0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x78, 0x6d, 0x6c, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x22, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x52, 0x10, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x1a,
	0x65, 0x0a, 0x15, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x78, 0x6d, 0x6c, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x99, 0x0c, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x15, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x49,
	0x44, 0x52, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x45, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x18, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x0a, 0x15, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x49, 0x44, 0x52, 0x15, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x0a, 0x1b, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x1b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x1e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0x82, 0xb5,
	0x18, 0x1c, 0x0a, 0x1a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x44, 0x52, 0x1a,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x1d, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x0a, 0x19, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x44, 0x52, 0x19, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x67, 0x0a,
	0x1f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x0a, 0x1b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x1b, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x0a, 0x1c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x1c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x77, 0x0a, 0x25, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x0a, 0x20, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x26, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0x82, 0xb5, 0x18,
	0x23, 0x0a, 0x21, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x21, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x1f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x5f, 0x73, 0x79, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x4b, 0x65,
	0x79, 0x31, 0x52, 0x1a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x4b, 0x65, 0x79, 0x31, 0x12, 0x65,
	0x0a, 0x1f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x4b, 0x65, 0x79, 0x32, 0x52, 0x1a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x4b, 0x65, 0x79, 0x32, 0x12, 0x65, 0x0a, 0x1f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x73,
	0x79, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20,
	0x82, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x4b, 0x65, 0x79, 0x33,
	0x52, 0x1a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x4b, 0x65, 0x79, 0x33, 0x12, 0x73, 0x0a, 0x23,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x0a,
	0x1f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x52, 0x1f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x12, 0x64, 0x0a, 0x1e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x0a,
	0x1a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x1a, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19,
	0x0a, 0x17, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x17, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x3a, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x0a, 0x09, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x43, 0x66, 0x67, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x40, 0x01, 0x48, 0x01, 0x42,
	0x43, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x65,
	0x6e, 0x63, 0x68, 0x79, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x63, 0x6d, 0x64,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x82, 0xb5, 0x18, 0x14,
	0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e,
	0x78, 0x6c, 0x73, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feature_toggle_proto_rawDescOnce sync.Once
	file_feature_toggle_proto_rawDescData = file_feature_toggle_proto_rawDesc
)

func file_feature_toggle_proto_rawDescGZIP() []byte {
	file_feature_toggle_proto_rawDescOnce.Do(func() {
		file_feature_toggle_proto_rawDescData = protoimpl.X.CompressGZIP(file_feature_toggle_proto_rawDescData)
	})
	return file_feature_toggle_proto_rawDescData
}

var file_feature_toggle_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_feature_toggle_proto_goTypes = []interface{}{
	(*ToggleCfg)(nil),               // 0: testxml.ToggleCfg
	nil,                             // 1: testxml.ToggleCfg.FeatureToggleMapEntry
	(*ToggleCfg_FeatureToggle)(nil), // 2: testxml.ToggleCfg.FeatureToggle
}
var file_feature_toggle_proto_depIdxs = []int32{
	1, // 0: testxml.ToggleCfg.feature_toggle_map:type_name -> testxml.ToggleCfg.FeatureToggleMapEntry
	2, // 1: testxml.ToggleCfg.FeatureToggleMapEntry.value:type_name -> testxml.ToggleCfg.FeatureToggle
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_feature_toggle_proto_init() }
func file_feature_toggle_proto_init() {
	if File_feature_toggle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feature_toggle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleCfg_FeatureToggle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feature_toggle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feature_toggle_proto_goTypes,
		DependencyIndexes: file_feature_toggle_proto_depIdxs,
		MessageInfos:      file_feature_toggle_proto_msgTypes,
	}.Build()
	File_feature_toggle_proto = out.File
	file_feature_toggle_proto_rawDesc = nil
	file_feature_toggle_proto_goTypes = nil
	file_feature_toggle_proto_depIdxs = nil
}
