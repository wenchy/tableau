// Generated by tableau-gen-proto v0.1.0. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: match.proto

package testpb

import (
	_ "github.com/Wenchy/tableau/proto/tableaupb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchModeList        []*MatchCfg_MatchMode          `protobuf:"bytes,1,rep,name=match_mode_list,json=matchModeList,proto3" json:"match_mode_list,omitempty"`
	ConfirmTimeOutPunish *MatchCfg_ConfirmTimeOutPunish `protobuf:"bytes,2,opt,name=confirm_time_out_punish,json=confirmTimeOutPunish,proto3" json:"confirm_time_out_punish,omitempty"`
	MatchRoom            *MatchCfg_MatchRoom            `protobuf:"bytes,3,opt,name=match_room,json=matchRoom,proto3" json:"match_room,omitempty"`
	MatchPlayer          *MatchCfg_MatchPlayer          `protobuf:"bytes,4,opt,name=match_player,json=matchPlayer,proto3" json:"match_player,omitempty"`
	MatchStatInfo        *MatchCfg_MatchStatInfo        `protobuf:"bytes,5,opt,name=match_stat_info,json=matchStatInfo,proto3" json:"match_stat_info,omitempty"`
	TeamRatingWeight     *MatchCfg_TeamRatingWeight     `protobuf:"bytes,6,opt,name=team_rating_weight,json=teamRatingWeight,proto3" json:"team_rating_weight,omitempty"`
}

func (x *MatchCfg) Reset() {
	*x = MatchCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg) ProtoMessage() {}

func (x *MatchCfg) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg.ProtoReflect.Descriptor instead.
func (*MatchCfg) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

func (x *MatchCfg) GetMatchModeList() []*MatchCfg_MatchMode {
	if x != nil {
		return x.MatchModeList
	}
	return nil
}

func (x *MatchCfg) GetConfirmTimeOutPunish() *MatchCfg_ConfirmTimeOutPunish {
	if x != nil {
		return x.ConfirmTimeOutPunish
	}
	return nil
}

func (x *MatchCfg) GetMatchRoom() *MatchCfg_MatchRoom {
	if x != nil {
		return x.MatchRoom
	}
	return nil
}

func (x *MatchCfg) GetMatchPlayer() *MatchCfg_MatchPlayer {
	if x != nil {
		return x.MatchPlayer
	}
	return nil
}

func (x *MatchCfg) GetMatchStatInfo() *MatchCfg_MatchStatInfo {
	if x != nil {
		return x.MatchStatInfo
	}
	return nil
}

func (x *MatchCfg) GetTeamRatingWeight() *MatchCfg_TeamRatingWeight {
	if x != nil {
		return x.TeamRatingWeight
	}
	return nil
}

type MatchCfg_MatchMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionType string                       `protobuf:"bytes,1,opt,name=mission_type,json=missionType,proto3" json:"mission_type,omitempty"`
	Time        *MatchCfg_MatchMode_Time     `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Open        *MatchCfg_MatchMode_Open     `protobuf:"bytes,3,opt,name=open,proto3" json:"open,omitempty"`
	CampList    []*MatchCfg_MatchMode_Camp   `protobuf:"bytes,4,rep,name=camp_list,json=campList,proto3" json:"camp_list,omitempty"`
	Strategy    *MatchCfg_MatchMode_Strategy `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Scope       *MatchCfg_MatchMode_Scope    `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
	FilterList  []*MatchCfg_MatchMode_Filter `protobuf:"bytes,7,rep,name=filter_list,json=filterList,proto3" json:"filter_list,omitempty"`
	Route       *MatchCfg_MatchMode_Route    `protobuf:"bytes,8,opt,name=route,proto3" json:"route,omitempty"`
	MatchAi     *MatchCfg_MatchMode_MatchAI  `protobuf:"bytes,9,opt,name=match_ai,json=matchAi,proto3" json:"match_ai,omitempty"`
	RandomList  []*MatchCfg_MatchMode_Random `protobuf:"bytes,10,rep,name=random_list,json=randomList,proto3" json:"random_list,omitempty"`
}

func (x *MatchCfg_MatchMode) Reset() {
	*x = MatchCfg_MatchMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode) ProtoMessage() {}

func (x *MatchCfg_MatchMode) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MatchCfg_MatchMode) GetMissionType() string {
	if x != nil {
		return x.MissionType
	}
	return ""
}

func (x *MatchCfg_MatchMode) GetTime() *MatchCfg_MatchMode_Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MatchCfg_MatchMode) GetOpen() *MatchCfg_MatchMode_Open {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *MatchCfg_MatchMode) GetCampList() []*MatchCfg_MatchMode_Camp {
	if x != nil {
		return x.CampList
	}
	return nil
}

func (x *MatchCfg_MatchMode) GetStrategy() *MatchCfg_MatchMode_Strategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *MatchCfg_MatchMode) GetScope() *MatchCfg_MatchMode_Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MatchCfg_MatchMode) GetFilterList() []*MatchCfg_MatchMode_Filter {
	if x != nil {
		return x.FilterList
	}
	return nil
}

func (x *MatchCfg_MatchMode) GetRoute() *MatchCfg_MatchMode_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MatchCfg_MatchMode) GetMatchAi() *MatchCfg_MatchMode_MatchAI {
	if x != nil {
		return x.MatchAi
	}
	return nil
}

func (x *MatchCfg_MatchMode) GetRandomList() []*MatchCfg_MatchMode_Random {
	if x != nil {
		return x.RandomList
	}
	return nil
}

type MatchCfg_ConfirmTimeOutPunish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *MatchCfg_ConfirmTimeOutPunish) Reset() {
	*x = MatchCfg_ConfirmTimeOutPunish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_ConfirmTimeOutPunish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_ConfirmTimeOutPunish) ProtoMessage() {}

func (x *MatchCfg_ConfirmTimeOutPunish) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_ConfirmTimeOutPunish.ProtoReflect.Descriptor instead.
func (*MatchCfg_ConfirmTimeOutPunish) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MatchCfg_ConfirmTimeOutPunish) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type MatchCfg_MatchRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLoop int32 `protobuf:"varint,1,opt,name=max_loop,json=maxLoop,proto3" json:"max_loop,omitempty"`
}

func (x *MatchCfg_MatchRoom) Reset() {
	*x = MatchCfg_MatchRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchRoom) ProtoMessage() {}

func (x *MatchCfg_MatchRoom) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchRoom.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchRoom) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MatchCfg_MatchRoom) GetMaxLoop() int32 {
	if x != nil {
		return x.MaxLoop
	}
	return 0
}

type MatchCfg_MatchPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLoop int32 `protobuf:"varint,1,opt,name=max_loop,json=maxLoop,proto3" json:"max_loop,omitempty"`
}

func (x *MatchCfg_MatchPlayer) Reset() {
	*x = MatchCfg_MatchPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchPlayer) ProtoMessage() {}

func (x *MatchCfg_MatchPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchPlayer.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchPlayer) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MatchCfg_MatchPlayer) GetMaxLoop() int32 {
	if x != nil {
		return x.MaxLoop
	}
	return 0
}

type MatchCfg_MatchStatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportInterval int32 `protobuf:"varint,1,opt,name=report_interval,json=reportInterval,proto3" json:"report_interval,omitempty"`
}

func (x *MatchCfg_MatchStatInfo) Reset() {
	*x = MatchCfg_MatchStatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchStatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchStatInfo) ProtoMessage() {}

func (x *MatchCfg_MatchStatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchStatInfo.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchStatInfo) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MatchCfg_MatchStatInfo) GetReportInterval() int32 {
	if x != nil {
		return x.ReportInterval
	}
	return 0
}

type MatchCfg_TeamRatingWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeightList []*MatchCfg_TeamRatingWeight_Weight `protobuf:"bytes,1,rep,name=weight_list,json=weightList,proto3" json:"weight_list,omitempty"`
}

func (x *MatchCfg_TeamRatingWeight) Reset() {
	*x = MatchCfg_TeamRatingWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_TeamRatingWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_TeamRatingWeight) ProtoMessage() {}

func (x *MatchCfg_TeamRatingWeight) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_TeamRatingWeight.ProtoReflect.Descriptor instead.
func (*MatchCfg_TeamRatingWeight) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MatchCfg_TeamRatingWeight) GetWeightList() []*MatchCfg_TeamRatingWeight_Weight {
	if x != nil {
		return x.WeightList
	}
	return nil
}

type MatchCfg_MatchMode_Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinTime     int32 `protobuf:"varint,1,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	MaxTime     int32 `protobuf:"varint,2,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Freq        int32 `protobuf:"varint,3,opt,name=freq,proto3" json:"freq,omitempty"`
	ConfirmTime int32 `protobuf:"varint,4,opt,name=confirm_time,json=confirmTime,proto3" json:"confirm_time,omitempty"`
}

func (x *MatchCfg_MatchMode_Time) Reset() {
	*x = MatchCfg_MatchMode_Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Time) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Time) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Time.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Time) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MatchCfg_MatchMode_Time) GetMinTime() int32 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

func (x *MatchCfg_MatchMode_Time) GetMaxTime() int32 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *MatchCfg_MatchMode_Time) GetFreq() int32 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *MatchCfg_MatchMode_Time) GetConfirmTime() int32 {
	if x != nil {
		return x.ConfirmTime
	}
	return 0
}

type MatchCfg_MatchMode_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginDate int32 `protobuf:"varint,1,opt,name=begin_date,json=beginDate,proto3" json:"begin_date,omitempty"`
	BeginTime int32 `protobuf:"varint,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndDate   int32 `protobuf:"varint,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	EndTime   int32 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *MatchCfg_MatchMode_Open) Reset() {
	*x = MatchCfg_MatchMode_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Open) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Open) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Open.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Open) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *MatchCfg_MatchMode_Open) GetBeginDate() int32 {
	if x != nil {
		return x.BeginDate
	}
	return 0
}

func (x *MatchCfg_MatchMode_Open) GetBeginTime() int32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *MatchCfg_MatchMode_Open) GetEndDate() int32 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *MatchCfg_MatchMode_Open) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type MatchCfg_MatchMode_Camp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampId    int32 `protobuf:"varint,1,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	PlayerNum int32 `protobuf:"varint,2,opt,name=player_num,json=playerNum,proto3" json:"player_num,omitempty"`
}

func (x *MatchCfg_MatchMode_Camp) Reset() {
	*x = MatchCfg_MatchMode_Camp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Camp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Camp) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Camp) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Camp.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Camp) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *MatchCfg_MatchMode_Camp) GetCampId() int32 {
	if x != nil {
		return x.CampId
	}
	return 0
}

func (x *MatchCfg_MatchMode_Camp) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

type MatchCfg_MatchMode_Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyId string `protobuf:"bytes,1,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
}

func (x *MatchCfg_MatchMode_Strategy) Reset() {
	*x = MatchCfg_MatchMode_Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Strategy) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Strategy.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Strategy) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *MatchCfg_MatchMode_Strategy) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

type MatchCfg_MatchMode_Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
}

func (x *MatchCfg_MatchMode_Scope) Reset() {
	*x = MatchCfg_MatchMode_Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Scope) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Scope) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Scope.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Scope) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *MatchCfg_MatchMode_Scope) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

type MatchCfg_MatchMode_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterId    string                             `protobuf:"bytes,1,opt,name=filter_id,json=filterId,proto3" json:"filter_id,omitempty"`
	Open        int32                              `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	Value       int32                              `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	UpdInterval int32                              `protobuf:"varint,4,opt,name=upd_interval,json=updInterval,proto3" json:"upd_interval,omitempty"`
	ParamList   []*MatchCfg_MatchMode_Filter_Param `protobuf:"bytes,5,rep,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
	PowerList   []*MatchCfg_MatchMode_Filter_Power `protobuf:"bytes,6,rep,name=power_list,json=powerList,proto3" json:"power_list,omitempty"`
}

func (x *MatchCfg_MatchMode_Filter) Reset() {
	*x = MatchCfg_MatchMode_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Filter) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Filter.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Filter) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *MatchCfg_MatchMode_Filter) GetFilterId() string {
	if x != nil {
		return x.FilterId
	}
	return ""
}

func (x *MatchCfg_MatchMode_Filter) GetOpen() int32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *MatchCfg_MatchMode_Filter) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MatchCfg_MatchMode_Filter) GetUpdInterval() int32 {
	if x != nil {
		return x.UpdInterval
	}
	return 0
}

func (x *MatchCfg_MatchMode_Filter) GetParamList() []*MatchCfg_MatchMode_Filter_Param {
	if x != nil {
		return x.ParamList
	}
	return nil
}

func (x *MatchCfg_MatchMode_Filter) GetPowerList() []*MatchCfg_MatchMode_Filter_Power {
	if x != nil {
		return x.PowerList
	}
	return nil
}

type MatchCfg_MatchMode_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key int32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MatchCfg_MatchMode_Route) Reset() {
	*x = MatchCfg_MatchMode_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Route) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Route) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Route.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Route) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *MatchCfg_MatchMode_Route) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type MatchCfg_MatchMode_MatchAI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen            int32                            `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	PlayerOnlyOneCamp int32                            `protobuf:"varint,2,opt,name=player_only_one_camp,json=playerOnlyOneCamp,proto3" json:"player_only_one_camp,omitempty"`
	GuaranteeAiRatio  int32                            `protobuf:"varint,3,opt,name=guarantee_ai_ratio,json=guaranteeAiRatio,proto3" json:"guarantee_ai_ratio,omitempty"`
	AiList            []*MatchCfg_MatchMode_MatchAI_AI `protobuf:"bytes,4,rep,name=ai_list,json=aiList,proto3" json:"ai_list,omitempty"`
}

func (x *MatchCfg_MatchMode_MatchAI) Reset() {
	*x = MatchCfg_MatchMode_MatchAI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_MatchAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_MatchAI) ProtoMessage() {}

func (x *MatchCfg_MatchMode_MatchAI) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_MatchAI.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_MatchAI) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *MatchCfg_MatchMode_MatchAI) GetIsOpen() int32 {
	if x != nil {
		return x.IsOpen
	}
	return 0
}

func (x *MatchCfg_MatchMode_MatchAI) GetPlayerOnlyOneCamp() int32 {
	if x != nil {
		return x.PlayerOnlyOneCamp
	}
	return 0
}

func (x *MatchCfg_MatchMode_MatchAI) GetGuaranteeAiRatio() int32 {
	if x != nil {
		return x.GuaranteeAiRatio
	}
	return 0
}

func (x *MatchCfg_MatchMode_MatchAI) GetAiList() []*MatchCfg_MatchMode_MatchAI_AI {
	if x != nil {
		return x.AiList
	}
	return nil
}

type MatchCfg_MatchMode_Random struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionType string `protobuf:"bytes,1,opt,name=mission_type,json=missionType,proto3" json:"mission_type,omitempty"`
	Priority    int32  `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *MatchCfg_MatchMode_Random) Reset() {
	*x = MatchCfg_MatchMode_Random{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Random) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Random) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Random) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Random.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Random) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 8}
}

func (x *MatchCfg_MatchMode_Random) GetMissionType() string {
	if x != nil {
		return x.MissionType
	}
	return ""
}

func (x *MatchCfg_MatchMode_Random) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type MatchCfg_MatchMode_Filter_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankLimit int32 `protobuf:"varint,1,opt,name=rank_limit,json=rankLimit,proto3" json:"rank_limit,omitempty"`
	Value     int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MatchCfg_MatchMode_Filter_Param) Reset() {
	*x = MatchCfg_MatchMode_Filter_Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Filter_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Filter_Param) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Filter_Param) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Filter_Param.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Filter_Param) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 5, 0}
}

func (x *MatchCfg_MatchMode_Filter_Param) GetRankLimit() int32 {
	if x != nil {
		return x.RankLimit
	}
	return 0
}

func (x *MatchCfg_MatchMode_Filter_Param) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MatchCfg_MatchMode_Filter_Power struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HornorPower int32                                    `protobuf:"varint,1,opt,name=hornor_power,json=hornorPower,proto3" json:"hornor_power,omitempty"`
	ParamList   []*MatchCfg_MatchMode_Filter_Power_Param `protobuf:"bytes,2,rep,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
}

func (x *MatchCfg_MatchMode_Filter_Power) Reset() {
	*x = MatchCfg_MatchMode_Filter_Power{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Filter_Power) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Filter_Power) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Filter_Power) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Filter_Power.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Filter_Power) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 5, 1}
}

func (x *MatchCfg_MatchMode_Filter_Power) GetHornorPower() int32 {
	if x != nil {
		return x.HornorPower
	}
	return 0
}

func (x *MatchCfg_MatchMode_Filter_Power) GetParamList() []*MatchCfg_MatchMode_Filter_Power_Param {
	if x != nil {
		return x.ParamList
	}
	return nil
}

type MatchCfg_MatchMode_Filter_Power_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MatchCfg_MatchMode_Filter_Power_Param) Reset() {
	*x = MatchCfg_MatchMode_Filter_Power_Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_Filter_Power_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_Filter_Power_Param) ProtoMessage() {}

func (x *MatchCfg_MatchMode_Filter_Power_Param) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_Filter_Power_Param.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_Filter_Power_Param) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 5, 1, 0}
}

func (x *MatchCfg_MatchMode_Filter_Power_Param) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MatchCfg_MatchMode_MatchAI_AI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	IsOpen  int32  `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	MinTime int32  `protobuf:"varint,3,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	MaxTime int32  `protobuf:"varint,4,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
}

func (x *MatchCfg_MatchMode_MatchAI_AI) Reset() {
	*x = MatchCfg_MatchMode_MatchAI_AI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_MatchMode_MatchAI_AI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_MatchMode_MatchAI_AI) ProtoMessage() {}

func (x *MatchCfg_MatchMode_MatchAI_AI) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_MatchMode_MatchAI_AI.ProtoReflect.Descriptor instead.
func (*MatchCfg_MatchMode_MatchAI_AI) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 0, 7, 0}
}

func (x *MatchCfg_MatchMode_MatchAI_AI) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MatchCfg_MatchMode_MatchAI_AI) GetIsOpen() int32 {
	if x != nil {
		return x.IsOpen
	}
	return 0
}

func (x *MatchCfg_MatchMode_MatchAI_AI) GetMinTime() int32 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

func (x *MatchCfg_MatchMode_MatchAI_AI) GetMaxTime() int32 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

type MatchCfg_TeamRatingWeight_Weight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num       int32                                     `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	ParamList []*MatchCfg_TeamRatingWeight_Weight_Param `protobuf:"bytes,2,rep,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
}

func (x *MatchCfg_TeamRatingWeight_Weight) Reset() {
	*x = MatchCfg_TeamRatingWeight_Weight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_TeamRatingWeight_Weight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_TeamRatingWeight_Weight) ProtoMessage() {}

func (x *MatchCfg_TeamRatingWeight_Weight) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_TeamRatingWeight_Weight.ProtoReflect.Descriptor instead.
func (*MatchCfg_TeamRatingWeight_Weight) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *MatchCfg_TeamRatingWeight_Weight) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *MatchCfg_TeamRatingWeight_Weight) GetParamList() []*MatchCfg_TeamRatingWeight_Weight_Param {
	if x != nil {
		return x.ParamList
	}
	return nil
}

type MatchCfg_TeamRatingWeight_Weight_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MatchCfg_TeamRatingWeight_Weight_Param) Reset() {
	*x = MatchCfg_TeamRatingWeight_Weight_Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_TeamRatingWeight_Weight_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_TeamRatingWeight_Weight_Param) ProtoMessage() {}

func (x *MatchCfg_TeamRatingWeight_Weight_Param) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_TeamRatingWeight_Weight_Param.ProtoReflect.Descriptor instead.
func (*MatchCfg_TeamRatingWeight_Weight_Param) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (x *MatchCfg_TeamRatingWeight_Weight_Param) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_match_proto protoreflect.FileDescriptor

var file_match_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x1a, 0x1e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x1d, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x66, 0x67, 0x12, 0x54, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x0a,
	0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x42, 0x1a, 0x82, 0xb5, 0x18, 0x16, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x50, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x12, 0x4b, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78,
	0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x53, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x0b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x13, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x66, 0x67, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x10, 0x74, 0x65,
	0x61, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xb2,
	0x14, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0c,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x82, 0xb5, 0x18,
	0x06, 0x0a, 0x04, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a,
	0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66,
	0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x0b,
	0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x69, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a,
	0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x69, 0x12, 0x51, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08,
	0x0a, 0x06, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0xbc, 0x01, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x01,
	0x30, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x82, 0xb5,
	0x18, 0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x01, 0x30, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x04, 0x46, 0x72, 0x65,
	0x71, 0x72, 0x01, 0x30, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x01, 0x30, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0xc6, 0x01, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x72, 0x01, 0x30, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x01, 0x30, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x72, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x63, 0x0a, 0x04,
	0x43, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x06, 0x43, 0x61, 0x6d,
	0x70, 0x49, 0x44, 0x72, 0x01, 0x30, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x72, 0x01, 0x30, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x1a, 0x3d, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x31, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64,
	0x1a, 0x31, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x82, 0xb5, 0x18,
	0x09, 0x0a, 0x07, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x1a, 0x93, 0x05, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a,
	0x04, 0x4f, 0x70, 0x65, 0x6e, 0x72, 0x01, 0x30, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x24,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x82,
	0xb5, 0x18, 0x0a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x72, 0x01, 0x30, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x82, 0xb5, 0x18, 0x10,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x72, 0x01, 0x30,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x54, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0b, 0x82, 0xb5, 0x18,
	0x07, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x60, 0x0a, 0x05, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x31, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x09, 0x52, 0x61,
	0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x01, 0x30, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x72, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xcb, 0x01, 0x0a, 0x05,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x72, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x82, 0xb5, 0x18,
	0x10, 0x0a, 0x0b, 0x48, 0x6f, 0x72, 0x6e, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x01,
	0x30, 0x52, 0x0b, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x5a,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x2d, 0x0a, 0x05, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x72,
	0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x27, 0x0a, 0x05, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x72, 0x01, 0x30, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x1a, 0xbf, 0x03, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x12, 0x28,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x72, 0x01, 0x30,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x4b, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x82, 0xb5, 0x18, 0x16, 0x0a, 0x11, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x72,
	0x01, 0x30, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e,
	0x65, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x0a, 0x10, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x41, 0x49, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x72, 0x01, 0x30, 0x52, 0x10, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x41, 0x69, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49,
	0x0a, 0x07, 0x61, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x66, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x49, 0x2e, 0x41, 0x49, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x41,
	0x49, 0x52, 0x06, 0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xa8, 0x01, 0x0a, 0x02, 0x41, 0x49,
	0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x72,
	0x01, 0x30, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x82, 0xb5,
	0x18, 0x0c, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x01, 0x30, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x01, 0x30, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0x6d, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x34,
	0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x08, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x72, 0x01, 0x30, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x1a, 0x39, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x38,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2b, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x82,
	0xb5, 0x18, 0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x72, 0x01, 0x30, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x1a, 0x3a, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x72, 0x01, 0x30, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x4c, 0x6f, 0x6f, 0x70, 0x1a, 0x51, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17,
	0x82, 0xb5, 0x18, 0x13, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x72, 0x01, 0x30, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xa3, 0x02, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x58, 0x0a, 0x0b,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0c, 0x82, 0xb5,
	0x18, 0x08, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xb4, 0x01, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1e, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c,
	0x82, 0xb5, 0x18, 0x08, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x72, 0x01, 0x30, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x5b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x2d,
	0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x72, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x0e, 0x82,
	0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x42, 0x3a, 0x5a,
	0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x65, 0x6e, 0x63,
	0x68, 0x79, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x78, 0x6d, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_match_proto_rawDescOnce sync.Once
	file_match_proto_rawDescData = file_match_proto_rawDesc
)

func file_match_proto_rawDescGZIP() []byte {
	file_match_proto_rawDescOnce.Do(func() {
		file_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_proto_rawDescData)
	})
	return file_match_proto_rawDescData
}

var file_match_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_match_proto_goTypes = []interface{}{
	(*MatchCfg)(nil),                               // 0: testxml.MatchCfg
	(*MatchCfg_MatchMode)(nil),                     // 1: testxml.MatchCfg.MatchMode
	(*MatchCfg_ConfirmTimeOutPunish)(nil),          // 2: testxml.MatchCfg.ConfirmTimeOutPunish
	(*MatchCfg_MatchRoom)(nil),                     // 3: testxml.MatchCfg.MatchRoom
	(*MatchCfg_MatchPlayer)(nil),                   // 4: testxml.MatchCfg.MatchPlayer
	(*MatchCfg_MatchStatInfo)(nil),                 // 5: testxml.MatchCfg.MatchStatInfo
	(*MatchCfg_TeamRatingWeight)(nil),              // 6: testxml.MatchCfg.TeamRatingWeight
	(*MatchCfg_MatchMode_Time)(nil),                // 7: testxml.MatchCfg.MatchMode.Time
	(*MatchCfg_MatchMode_Open)(nil),                // 8: testxml.MatchCfg.MatchMode.Open
	(*MatchCfg_MatchMode_Camp)(nil),                // 9: testxml.MatchCfg.MatchMode.Camp
	(*MatchCfg_MatchMode_Strategy)(nil),            // 10: testxml.MatchCfg.MatchMode.Strategy
	(*MatchCfg_MatchMode_Scope)(nil),               // 11: testxml.MatchCfg.MatchMode.Scope
	(*MatchCfg_MatchMode_Filter)(nil),              // 12: testxml.MatchCfg.MatchMode.Filter
	(*MatchCfg_MatchMode_Route)(nil),               // 13: testxml.MatchCfg.MatchMode.Route
	(*MatchCfg_MatchMode_MatchAI)(nil),             // 14: testxml.MatchCfg.MatchMode.MatchAI
	(*MatchCfg_MatchMode_Random)(nil),              // 15: testxml.MatchCfg.MatchMode.Random
	(*MatchCfg_MatchMode_Filter_Param)(nil),        // 16: testxml.MatchCfg.MatchMode.Filter.Param
	(*MatchCfg_MatchMode_Filter_Power)(nil),        // 17: testxml.MatchCfg.MatchMode.Filter.Power
	(*MatchCfg_MatchMode_Filter_Power_Param)(nil),  // 18: testxml.MatchCfg.MatchMode.Filter.Power.Param
	(*MatchCfg_MatchMode_MatchAI_AI)(nil),          // 19: testxml.MatchCfg.MatchMode.MatchAI.AI
	(*MatchCfg_TeamRatingWeight_Weight)(nil),       // 20: testxml.MatchCfg.TeamRatingWeight.Weight
	(*MatchCfg_TeamRatingWeight_Weight_Param)(nil), // 21: testxml.MatchCfg.TeamRatingWeight.Weight.Param
}
var file_match_proto_depIdxs = []int32{
	1,  // 0: testxml.MatchCfg.match_mode_list:type_name -> testxml.MatchCfg.MatchMode
	2,  // 1: testxml.MatchCfg.confirm_time_out_punish:type_name -> testxml.MatchCfg.ConfirmTimeOutPunish
	3,  // 2: testxml.MatchCfg.match_room:type_name -> testxml.MatchCfg.MatchRoom
	4,  // 3: testxml.MatchCfg.match_player:type_name -> testxml.MatchCfg.MatchPlayer
	5,  // 4: testxml.MatchCfg.match_stat_info:type_name -> testxml.MatchCfg.MatchStatInfo
	6,  // 5: testxml.MatchCfg.team_rating_weight:type_name -> testxml.MatchCfg.TeamRatingWeight
	7,  // 6: testxml.MatchCfg.MatchMode.time:type_name -> testxml.MatchCfg.MatchMode.Time
	8,  // 7: testxml.MatchCfg.MatchMode.open:type_name -> testxml.MatchCfg.MatchMode.Open
	9,  // 8: testxml.MatchCfg.MatchMode.camp_list:type_name -> testxml.MatchCfg.MatchMode.Camp
	10, // 9: testxml.MatchCfg.MatchMode.strategy:type_name -> testxml.MatchCfg.MatchMode.Strategy
	11, // 10: testxml.MatchCfg.MatchMode.scope:type_name -> testxml.MatchCfg.MatchMode.Scope
	12, // 11: testxml.MatchCfg.MatchMode.filter_list:type_name -> testxml.MatchCfg.MatchMode.Filter
	13, // 12: testxml.MatchCfg.MatchMode.route:type_name -> testxml.MatchCfg.MatchMode.Route
	14, // 13: testxml.MatchCfg.MatchMode.match_ai:type_name -> testxml.MatchCfg.MatchMode.MatchAI
	15, // 14: testxml.MatchCfg.MatchMode.random_list:type_name -> testxml.MatchCfg.MatchMode.Random
	20, // 15: testxml.MatchCfg.TeamRatingWeight.weight_list:type_name -> testxml.MatchCfg.TeamRatingWeight.Weight
	16, // 16: testxml.MatchCfg.MatchMode.Filter.param_list:type_name -> testxml.MatchCfg.MatchMode.Filter.Param
	17, // 17: testxml.MatchCfg.MatchMode.Filter.power_list:type_name -> testxml.MatchCfg.MatchMode.Filter.Power
	19, // 18: testxml.MatchCfg.MatchMode.MatchAI.ai_list:type_name -> testxml.MatchCfg.MatchMode.MatchAI.AI
	18, // 19: testxml.MatchCfg.MatchMode.Filter.Power.param_list:type_name -> testxml.MatchCfg.MatchMode.Filter.Power.Param
	21, // 20: testxml.MatchCfg.TeamRatingWeight.Weight.param_list:type_name -> testxml.MatchCfg.TeamRatingWeight.Weight.Param
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_match_proto_init() }
func file_match_proto_init() {
	if File_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_ConfirmTimeOutPunish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchStatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_TeamRatingWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Camp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_MatchAI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Random); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Filter_Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Filter_Power); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_Filter_Power_Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_MatchMode_MatchAI_AI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_TeamRatingWeight_Weight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_TeamRatingWeight_Weight_Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match_proto_goTypes,
		DependencyIndexes: file_match_proto_depIdxs,
		MessageInfos:      file_match_proto_msgTypes,
	}.Build()
	File_match_proto = out.File
	file_match_proto_rawDesc = nil
	file_match_proto_goTypes = nil
	file_match_proto_depIdxs = nil
}
