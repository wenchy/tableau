//=============this file is auto generatored, do not alert!==========

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: cs_com_def.proto

package testpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 由gen_feature_toggle自动生成，请勿手动添加
type FeatureToggleMacroType int32

const (
	FeatureToggleMacroType_TOGGLE_SAMPLE                     FeatureToggleMacroType = 0  //样例
	FeatureToggleMacroType_TOGGLE_TEST                       FeatureToggleMacroType = 1  //测试
	FeatureToggleMacroType_TOGGLE_MATCH                      FeatureToggleMacroType = 2  //匹配
	FeatureToggleMacroType_TOGGLE_EVENT                      FeatureToggleMacroType = 3  //事件
	FeatureToggleMacroType_TOGGLE_GUILD                      FeatureToggleMacroType = 4  //公会
	FeatureToggleMacroType_TOGGLE_EQUIP_SELL                 FeatureToggleMacroType = 5  //记忆(意志)出售
	FeatureToggleMacroType_TOGGLE_EQUIP_SWITCH               FeatureToggleMacroType = 6  //记忆(意志)装配
	FeatureToggleMacroType_TOGGLE_EQUIP_UPGRADE              FeatureToggleMacroType = 7  //记忆(意志)强化
	FeatureToggleMacroType_TOGGLE_WEAPON_STAR_UP             FeatureToggleMacroType = 8  //意志进阶
	FeatureToggleMacroType_TOGGLE_TEAM_CREATE_TEAM           FeatureToggleMacroType = 9  //创建队伍
	FeatureToggleMacroType_TOGGLE_TEAM_REQ_MATCH             FeatureToggleMacroType = 10 //队伍匹配
	FeatureToggleMacroType_TOGGLE_TEAM_JOIN_TEAM             FeatureToggleMacroType = 11 //加入队伍
	FeatureToggleMacroType_TOGGLE_BOUNTY_UNLOCK              FeatureToggleMacroType = 12 //悬赏解锁
	FeatureToggleMacroType_TOGGLE_RANK                       FeatureToggleMacroType = 13 //排行榜
	FeatureToggleMacroType_TOGGLE_MALL_SHOP                  FeatureToggleMacroType = 14 //商城
	FeatureToggleMacroType_TOGGLE_MALL_BUY                   FeatureToggleMacroType = 15 //商城购买
	FeatureToggleMacroType_TOGGLE_CHAT                       FeatureToggleMacroType = 16 //聊天
	FeatureToggleMacroType_TOGGLE_GLOBAL_MAIL                FeatureToggleMacroType = 17 //全服邮件
	FeatureToggleMacroType_TOGGLE_ASSIST_SKILL               FeatureToggleMacroType = 18 //援护技
	FeatureToggleMacroType_TOGGLE_GAMEPLAY_STATISTIC         FeatureToggleMacroType = 19 //单局统计流水
	FeatureToggleMacroType_TOGGLE_CHECK_CLIENT_VERSION_INCR  FeatureToggleMacroType = 20 //是否要校验版本降级登录
	FeatureToggleMacroType_TOGGLE_PC_PAY                     FeatureToggleMacroType = 21 //点券pc支付开放开关
	FeatureToggleMacroType_TOGGLE_TCAP_CMD_STAT              FeatureToggleMacroType = 22 //Tcaplus状态统计开关
	FeatureToggleMacroType_TOGGLE_ITEM_BAG_FULL_IS_FAIL      FeatureToggleMacroType = 23 //添加道具，背包满是否当错误
	FeatureToggleMacroType_TOGGLE_ITEM_PRESSURE_BREAK_ADDOBJ FeatureToggleMacroType = 24 //压测 跳过加道具
	FeatureToggleMacroType_TOGGLE_OPEN_CFG_SET               FeatureToggleMacroType = 25 //开发配置切片, 非0表示使用切片
	FeatureToggleMacroType_TOGGLE_GAMEPLAY_START_NOT_CONNECT FeatureToggleMacroType = 26 //单局开始未连上服务器，是否当做掉线，非0表示当做掉线
	FeatureToggleMacroType_TOGGLE_PVPAGENT_USE_RESUME        FeatureToggleMacroType = 27 //pvpagentsvr是否开启共享内存恢复
	FeatureToggleMacroType_TOGGLE_CHAT_USE_RESUME            FeatureToggleMacroType = 28 //chatsvr是否开启共享内存恢复
	FeatureToggleMacroType_TOGGLE_VIEW_USE_RESUME            FeatureToggleMacroType = 29 //viewsvr是否开启共享内存恢复
	FeatureToggleMacroType_TOGGLE_LEAVE_FUBEN_NEED_RESUME    FeatureToggleMacroType = 30 //主动离开副本是否恢复
	FeatureToggleMacroType_TOGGLE_FUBEN_RECONNCET            FeatureToggleMacroType = 31 //副本断线重连测试开关
	FeatureToggleMacroType_TOGGLE_FUBEN_MD5_CHECK            FeatureToggleMacroType = 32 //副本MD5校验开关
	FeatureToggleMacroType_TOGGLE_HOTRES_CHECK               FeatureToggleMacroType = 33 //资源版本检查开发
	FeatureToggleMacroType_TOGGLE_MATCH_VERSION_CHECK        FeatureToggleMacroType = 34 //匹配是否需要检查版本一致性
	FeatureToggleMacroType_TOGGLE_SUPORT_MUTLI_CE_TLOG       FeatureToggleMacroType = 35 //tlog区分多套ce环境【上线后关掉】
	FeatureToggleMacroType_TOGGLE_LOG_REAL_TIME              FeatureToggleMacroType = 36 //日志是否使用实时时间
	FeatureToggleMacroType_TOGGLE_PVP_OPEN_TIME              FeatureToggleMacroType = 37 //是否开启PvpOpenTime限制，请见PvpOpenTime.xlsx
	FeatureToggleMacroType_TOGGLE_FUBEN_OPEN_TIME            FeatureToggleMacroType = 38 //是否开启FubenOpenTime限制，请见FubenOpenTimeInfo.xlsx
	FeatureToggleMacroType_TOGGLE_IN_GAME_CHECK              FeatureToggleMacroType = 39 //开局是否检查已经有单局
	FeatureToggleMacroType_TOGGLE_VIP_ENTRY                  FeatureToggleMacroType = 40 //会员、超会入口
	FeatureToggleMacroType_TOGGLE_INVITE                     FeatureToggleMacroType = 41 //邀请
	FeatureToggleMacroType_TOGGLE_GAME_PRIVILEGE             FeatureToggleMacroType = 42 //游戏特权
	FeatureToggleMacroType_TOGGLE_PANDORA                    FeatureToggleMacroType = 43 //潘多拉开关
	FeatureToggleMacroType_TOGGLE_MICRO_COMMUNITY            FeatureToggleMacroType = 44 //微社区入口开关
	FeatureToggleMacroType_TOGGLE_TENCENT_ESPORT             FeatureToggleMacroType = 45 //企鹅电竞
	FeatureToggleMacroType_TOGGLE_XINYUE_PRIVILEGE           FeatureToggleMacroType = 46 //心悦特权
	FeatureToggleMacroType_TOGGLE_WEIXIN_MEDIA_PLATFORM      FeatureToggleMacroType = 47 //微信公众号
	FeatureToggleMacroType_TOGGLE_PACKAGE_CENTER             FeatureToggleMacroType = 48 //礼包中心
	FeatureToggleMacroType_TOGGLE_ANNOUNCEMENT               FeatureToggleMacroType = 49 //公告(包括:登录前公告+登录后公告)
	FeatureToggleMacroType_TOGGLE_ACTIVITY_ENTRY             FeatureToggleMacroType = 50 //活动入口
	FeatureToggleMacroType_TOGGLE_UPLOAD_VIDEO               FeatureToggleMacroType = 51 //是否开启录像上传
	FeatureToggleMacroType_TOGGLE_TRUESKILL_CAL              FeatureToggleMacroType = 52 //是否开启trueskill隐藏分计算
)

// Enum value maps for FeatureToggleMacroType.
var (
	FeatureToggleMacroType_name = map[int32]string{
		0:  "TOGGLE_SAMPLE",
		1:  "TOGGLE_TEST",
		2:  "TOGGLE_MATCH",
		3:  "TOGGLE_EVENT",
		4:  "TOGGLE_GUILD",
		5:  "TOGGLE_EQUIP_SELL",
		6:  "TOGGLE_EQUIP_SWITCH",
		7:  "TOGGLE_EQUIP_UPGRADE",
		8:  "TOGGLE_WEAPON_STAR_UP",
		9:  "TOGGLE_TEAM_CREATE_TEAM",
		10: "TOGGLE_TEAM_REQ_MATCH",
		11: "TOGGLE_TEAM_JOIN_TEAM",
		12: "TOGGLE_BOUNTY_UNLOCK",
		13: "TOGGLE_RANK",
		14: "TOGGLE_MALL_SHOP",
		15: "TOGGLE_MALL_BUY",
		16: "TOGGLE_CHAT",
		17: "TOGGLE_GLOBAL_MAIL",
		18: "TOGGLE_ASSIST_SKILL",
		19: "TOGGLE_GAMEPLAY_STATISTIC",
		20: "TOGGLE_CHECK_CLIENT_VERSION_INCR",
		21: "TOGGLE_PC_PAY",
		22: "TOGGLE_TCAP_CMD_STAT",
		23: "TOGGLE_ITEM_BAG_FULL_IS_FAIL",
		24: "TOGGLE_ITEM_PRESSURE_BREAK_ADDOBJ",
		25: "TOGGLE_OPEN_CFG_SET",
		26: "TOGGLE_GAMEPLAY_START_NOT_CONNECT",
		27: "TOGGLE_PVPAGENT_USE_RESUME",
		28: "TOGGLE_CHAT_USE_RESUME",
		29: "TOGGLE_VIEW_USE_RESUME",
		30: "TOGGLE_LEAVE_FUBEN_NEED_RESUME",
		31: "TOGGLE_FUBEN_RECONNCET",
		32: "TOGGLE_FUBEN_MD5_CHECK",
		33: "TOGGLE_HOTRES_CHECK",
		34: "TOGGLE_MATCH_VERSION_CHECK",
		35: "TOGGLE_SUPORT_MUTLI_CE_TLOG",
		36: "TOGGLE_LOG_REAL_TIME",
		37: "TOGGLE_PVP_OPEN_TIME",
		38: "TOGGLE_FUBEN_OPEN_TIME",
		39: "TOGGLE_IN_GAME_CHECK",
		40: "TOGGLE_VIP_ENTRY",
		41: "TOGGLE_INVITE",
		42: "TOGGLE_GAME_PRIVILEGE",
		43: "TOGGLE_PANDORA",
		44: "TOGGLE_MICRO_COMMUNITY",
		45: "TOGGLE_TENCENT_ESPORT",
		46: "TOGGLE_XINYUE_PRIVILEGE",
		47: "TOGGLE_WEIXIN_MEDIA_PLATFORM",
		48: "TOGGLE_PACKAGE_CENTER",
		49: "TOGGLE_ANNOUNCEMENT",
		50: "TOGGLE_ACTIVITY_ENTRY",
		51: "TOGGLE_UPLOAD_VIDEO",
		52: "TOGGLE_TRUESKILL_CAL",
	}
	FeatureToggleMacroType_value = map[string]int32{
		"TOGGLE_SAMPLE":                     0,
		"TOGGLE_TEST":                       1,
		"TOGGLE_MATCH":                      2,
		"TOGGLE_EVENT":                      3,
		"TOGGLE_GUILD":                      4,
		"TOGGLE_EQUIP_SELL":                 5,
		"TOGGLE_EQUIP_SWITCH":               6,
		"TOGGLE_EQUIP_UPGRADE":              7,
		"TOGGLE_WEAPON_STAR_UP":             8,
		"TOGGLE_TEAM_CREATE_TEAM":           9,
		"TOGGLE_TEAM_REQ_MATCH":             10,
		"TOGGLE_TEAM_JOIN_TEAM":             11,
		"TOGGLE_BOUNTY_UNLOCK":              12,
		"TOGGLE_RANK":                       13,
		"TOGGLE_MALL_SHOP":                  14,
		"TOGGLE_MALL_BUY":                   15,
		"TOGGLE_CHAT":                       16,
		"TOGGLE_GLOBAL_MAIL":                17,
		"TOGGLE_ASSIST_SKILL":               18,
		"TOGGLE_GAMEPLAY_STATISTIC":         19,
		"TOGGLE_CHECK_CLIENT_VERSION_INCR":  20,
		"TOGGLE_PC_PAY":                     21,
		"TOGGLE_TCAP_CMD_STAT":              22,
		"TOGGLE_ITEM_BAG_FULL_IS_FAIL":      23,
		"TOGGLE_ITEM_PRESSURE_BREAK_ADDOBJ": 24,
		"TOGGLE_OPEN_CFG_SET":               25,
		"TOGGLE_GAMEPLAY_START_NOT_CONNECT": 26,
		"TOGGLE_PVPAGENT_USE_RESUME":        27,
		"TOGGLE_CHAT_USE_RESUME":            28,
		"TOGGLE_VIEW_USE_RESUME":            29,
		"TOGGLE_LEAVE_FUBEN_NEED_RESUME":    30,
		"TOGGLE_FUBEN_RECONNCET":            31,
		"TOGGLE_FUBEN_MD5_CHECK":            32,
		"TOGGLE_HOTRES_CHECK":               33,
		"TOGGLE_MATCH_VERSION_CHECK":        34,
		"TOGGLE_SUPORT_MUTLI_CE_TLOG":       35,
		"TOGGLE_LOG_REAL_TIME":              36,
		"TOGGLE_PVP_OPEN_TIME":              37,
		"TOGGLE_FUBEN_OPEN_TIME":            38,
		"TOGGLE_IN_GAME_CHECK":              39,
		"TOGGLE_VIP_ENTRY":                  40,
		"TOGGLE_INVITE":                     41,
		"TOGGLE_GAME_PRIVILEGE":             42,
		"TOGGLE_PANDORA":                    43,
		"TOGGLE_MICRO_COMMUNITY":            44,
		"TOGGLE_TENCENT_ESPORT":             45,
		"TOGGLE_XINYUE_PRIVILEGE":           46,
		"TOGGLE_WEIXIN_MEDIA_PLATFORM":      47,
		"TOGGLE_PACKAGE_CENTER":             48,
		"TOGGLE_ANNOUNCEMENT":               49,
		"TOGGLE_ACTIVITY_ENTRY":             50,
		"TOGGLE_UPLOAD_VIDEO":               51,
		"TOGGLE_TRUESKILL_CAL":              52,
	}
)

func (x FeatureToggleMacroType) Enum() *FeatureToggleMacroType {
	p := new(FeatureToggleMacroType)
	*p = x
	return p
}

func (x FeatureToggleMacroType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureToggleMacroType) Descriptor() protoreflect.EnumDescriptor {
	return file_cs_com_def_proto_enumTypes[0].Descriptor()
}

func (FeatureToggleMacroType) Type() protoreflect.EnumType {
	return &file_cs_com_def_proto_enumTypes[0]
}

func (x FeatureToggleMacroType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureToggleMacroType.Descriptor instead.
func (FeatureToggleMacroType) EnumDescriptor() ([]byte, []int) {
	return file_cs_com_def_proto_rawDescGZIP(), []int{0}
}

// 单局类型 @ name=MissionType
type MissionType int32

const (
	MissionType_MT_EMMT_MIN                         MissionType = 0  //name=EMMT_MIN @ cname=最小值 @ display=无
	MissionType_MT_MAIN_FUBEN                       MissionType = 1  //name=MAIN_FUBEN @ cname=循环副本 @ display=无
	MissionType_MT_PLOT_FUBEN                       MissionType = 2  //name=PLOT_FUBEN @ cname=剧情副本 @ display=无
	MissionType_MT_ABYSS_FUBEN                      MissionType = 3  //name=ABYSS_FUBEN @ cname=深渊副本 @ display=无
	MissionType_MT_ANCIENT_FUBEN                    MissionType = 4  //name=ANCIENT_FUBEN @ cname=远古副本 @ display=无
	MissionType_MT_RAID_FUBEN                       MissionType = 5  //name=RAID_FUBEN @ cname=团队副本 @ display=无
	MissionType_MT_CLASSIC_PVP                      MissionType = 6  //1V1单局 @ name=CLASSIC_PVP @ cname=经典PVP @ display=无
	MissionType_MT_UNKNOWN_LANDS                    MissionType = 7  //name=UNKNOWN_LANDS @ cname=异界副本 @ display=无
	MissionType_MT_BOUNTY_FUBEN                     MissionType = 8  //name=BOUNTY_FUBEN @ cname=悬赏副本 @ display=无
	MissionType_MT_CLASSIC_PVP_1V1                  MissionType = 9  //1V1单局 @ name=CLASSIC_PVP_1V1 @ cname=经典1V1 @ display=无
	MissionType_MT_CLASSIC_PVP_3v3                  MissionType = 10 //3V3单局 @ name=CLASSIC_PVP_3V3 @ cname=经典3V3 @ display=无
	MissionType_MT_CLASSIC_PVP_HeadCount            MissionType = 11 //人头战 @ name=CLASSIC_PVP_HeadCount @ cname=人头战 @ display=无
	MissionType_MT_CLASSIC_PVP_HeadCount_1V1        MissionType = 12 //人头战1V1 @ name=CLASSIC_PVP_HeadCount_1V1 @ cname=人头战1V1 @ display=无
	MissionType_MT_RMODE_FUBEN                      MissionType = 13 //R模式 @ name=MT_RMODE_FUBEN @ cname=R模式 @ display=无
	MissionType_MT_PVP_RoundBattle_1V1              MissionType = 14 //车轮战1V1 @ name=PVP_RoundBattle_1V1 @ cname=车轮战1V1 @ display=无
	MissionType_MT_DAILY_FUBEN                      MissionType = 15 //name=DAILY_FUBEN @ cname=日常副本 @ display=无
	MissionType_MT_PVP_Virtual_Tournament           MissionType = 19 //name=PVP_Virtual_Tournament @ cname=虚拟锦标赛 @ display=无
	MissionType_MT_PVP_GroupBattle_2V2              MissionType = 20 //name=PVP_GroupBattle_2V2 @ cname=团体对战2v2 @ display=无
	MissionType_MT_WEEKLY_FUBEN                     MissionType = 21 //name=WEEKLY_FUBEN @ cname=守卫长城 @ display=无
	MissionType_MT_DATA_TEST_FUBEN                  MissionType = 22 //name=MT_DATA_TEST_FUBEN @ cname=数值测试副本 @ display=无
	MissionType_MT_PVP_Low_Rank_RoundBattle_1V1     MissionType = 23 //name=MT_PVP_Low_Rank_RoundBattle_1V1 @ cname=车轮战低端排位赛1v1 @ display=无
	MissionType_MT_PVP_High_Rank_RoundBattle_1V1    MissionType = 24 //name=MT_PVP_High_Rank_RoundBattle_1V1 @ cname=车轮战高端排位赛1v1 @ display=无
	MissionType_MT_INFINITY_TOWER                   MissionType = 25 //name=MT_INFINITY_TOWER @ cname=通天塔模式 @ display=无
	MissionType_MT_ARCADE_GAME                      MissionType = 26 //name=MT_ARCADE_GAME @ cname=巡回赛  @ display=废弃，后面干掉
	MissionType_MT_RMODE_MONTH                      MissionType = 27 //R模式月 @ name=MT_RMODE_MONTH @ cname=英雄传记BP专用 @ display=无
	MissionType_MT_RMODE_DAILY                      MissionType = 28 //R模式日 @ name=MT_RMODE_DAILY @ cname=心之试炼BP专用 @ display=无
	MissionType_MT_RMODE_WEEK                       MissionType = 29 //周常副本 @ name=MT_RMODE_WEEK @ cname=周常副本 @ display=无
	MissionType_MT_GREAT_WALL_TRAINING              MissionType = 30 //长城演武 @ name=MT_GREAT_WALL_TRAINING @ cname=长城演武 @ display=无
	MissionType_MT_PRACTICE                         MissionType = 31 //name=MT_PRACTICE @ cname=练功房  @ display=无
	MissionType_MT_PVP_SUPERKILL_MULTI              MissionType = 32 //name=MT_PVP_SUPERKILL_MULTI @ cname=竞技多人  @ display=当前版本 2v2
	MissionType_MT_PVP_SUPERKILL                    MissionType = 33 //name=MT_PVP_SUPERKILL @ cname=竞技单人  @ display=当前版本 1v1
	MissionType_MT_PVP_SUPERKILL_GUIDE              MissionType = 34 //name=MT_PVP_SUPERKILL_GUIDE@ cname=竞技单人引导副本  @ display=无
	MissionType_MT_PVP_TEAM_DEATH_MATCH             MissionType = 35 //name=MT_PVP_TEAM_DEATH_MATCH@ cname=团竞PVP  @ display=当前版本 4v4
	MissionType_MT_FREE_PRACTICE                    MissionType = 36 //name=MT_FREE_PRACTICE@ cname=自由练习场  @ display=无
	MissionType_MT_NoviceGuide                      MissionType = 37 //name=MT_NoviceGuide@ cname=新手引导  @ display=无
	MissionType_MT_PVP_ELIMINATION_GAME             MissionType = 38 //name=MT_PVP_ELIMINATION_GAME@ cname=多人淘汰赛  @ display=当前版本 1v1v1v1多人淘汰赛
	MissionType_MT_ARCADE                           MissionType = 39 //name=MT_ARCADE @ cname=混沌裂隙  @ display=混沌裂隙
	MissionType_MT_PVP_SUPERKILL_GVG                MissionType = 40 //name=MT_PVP_SUPERKILL_GVG @ cname=战队赛1v1  @ display=当前版本 战队赛1v1
	MissionType_MT_PVP_SUPERKILL_FRIENDPK           MissionType = 41 //name=MT_PVP_SUPERKILL_FRIENDPK @ cname=约战1v1  @ display=当前版本 约战1v1
	MissionType_MT_PVP_SUPERKILL_MULTI_FRIENDPK     MissionType = 42 //name=MT_PVP_SUPERKILL_MULTI_FRIENDPK @ cname=约战2v2  @ display=当前版本 约战2v2
	MissionType_MT_PVP_TEAM_DEATH_MATCH_FRIENDPK    MissionType = 43 //name=MT_PVP_TEAM_DEATH_MATCH_FRIENDPK @ cname=约战4v4  @ display=当前版本 约战4v4
	MissionType_MT_PVP_ELIMINATION_GAME_FRIENDPK    MissionType = 44 //name=MT_PVP_ELIMINATION_GAME_FRIENDPK @ cname=约战1v1v1v1  @ display=当前版本 约战1v1v1v1
	MissionType_MT_ELITE_FUBEN                      MissionType = 45 //name=MT_ELITE_FUBEN @ cname=精英副本 @ display=暗心追缉
	MissionType_MT_EQUIP_FUBEN                      MissionType = 46 //name=MT_EQUIP_FUBEN @ cname=记忆副本 @ display=时空之境
	MissionType_MT_MATERIAL_FUBEN                   MissionType = 47 //name=MT_MATERIAL_FUBEN @ cname=突破材料副本 @ display=梦魇降临
	MissionType_MT_EXP_FUBEN                        MissionType = 48 //name=MT_EXP_FUBEN @ cname=日常经验本 @ display=日常经验本
	MissionType_MT_GOLD_FUBEN                       MissionType = 49 //name=MT_GOLD_FUBEN @ cname=日常金币本 @ display=日常金币本
	MissionType_MT_SKILL_POINT_FUBEN                MissionType = 50 //name=MT_SKILL_POINT_FUBEN @ cname=日常技能点本 @ display=日常技能点本
	MissionType_MT_PVP_RANDOM                       MissionType = 51 //name=MT_PVP_RANDOM @ cname=混匹 @ display=混匹
	MissionType_MT_PVP_SUPERKILL_COMPETITION        MissionType = 52 //name=MT_PVP_SUPERKILL_COMPETITION @ cname=比赛服1v1  @ display=当前版本 比赛服1v1
	MissionType_MT_PVP_SUPERKILL_MULTI_COMPETITION  MissionType = 53 //name=MT_PVP_SUPERKILL_MULTI_COMPETITION @ cname=比赛服2v2  @ display=当前版本 比赛服2v2
	MissionType_MT_PVP_TEAM_DEATH_MATCH_COMPETITION MissionType = 54 //name=MT_PVP_TEAM_DEATH_MATCH_COMPETITION @ cname=比赛服4v4  @ display=当前版本 比赛服4v4
	MissionType_MT_PVP_ELIMINATION_GAME_COMPETITION MissionType = 55 //name=MT_PVP_ELIMINATION_GAME_COMPETITION @ cname=比赛服1v1v1v1  @ display=当前版本 比赛服1v1v1v1
	MissionType_MT_SIDE_FUBEN                       MissionType = 56 //name=SIDE_FUBEN @ cname=支线任务副本 @ display=无
	MissionType_MT_PVP_WHEEL_WAR_3V3                MissionType = 57 //name=MT_PVP_WHEEL_WAR_3V3 @ cname=车轮战3v3 @ display=无
	MissionType_MT_GUILD_FUBEN                      MissionType = 58 //name=MT_GUILD_FUBEN @ cname=战队副本 @ display=无
	MissionType_MT_PVP_BARBARIAN_BATTLE             MissionType = 59 //name=MT_PVP_BARBARIAN_BATTLE @ cname=野蛮人大作战 @ display=无
	MissionType_MT_EMMT_MAX                         MissionType = 60 //name=MT_EMMT_MAX @ cname=最大值 @ display=无
)

// Enum value maps for MissionType.
var (
	MissionType_name = map[int32]string{
		0:  "MT_EMMT_MIN",
		1:  "MT_MAIN_FUBEN",
		2:  "MT_PLOT_FUBEN",
		3:  "MT_ABYSS_FUBEN",
		4:  "MT_ANCIENT_FUBEN",
		5:  "MT_RAID_FUBEN",
		6:  "MT_CLASSIC_PVP",
		7:  "MT_UNKNOWN_LANDS",
		8:  "MT_BOUNTY_FUBEN",
		9:  "MT_CLASSIC_PVP_1V1",
		10: "MT_CLASSIC_PVP_3v3",
		11: "MT_CLASSIC_PVP_HeadCount",
		12: "MT_CLASSIC_PVP_HeadCount_1V1",
		13: "MT_RMODE_FUBEN",
		14: "MT_PVP_RoundBattle_1V1",
		15: "MT_DAILY_FUBEN",
		19: "MT_PVP_Virtual_Tournament",
		20: "MT_PVP_GroupBattle_2V2",
		21: "MT_WEEKLY_FUBEN",
		22: "MT_DATA_TEST_FUBEN",
		23: "MT_PVP_Low_Rank_RoundBattle_1V1",
		24: "MT_PVP_High_Rank_RoundBattle_1V1",
		25: "MT_INFINITY_TOWER",
		26: "MT_ARCADE_GAME",
		27: "MT_RMODE_MONTH",
		28: "MT_RMODE_DAILY",
		29: "MT_RMODE_WEEK",
		30: "MT_GREAT_WALL_TRAINING",
		31: "MT_PRACTICE",
		32: "MT_PVP_SUPERKILL_MULTI",
		33: "MT_PVP_SUPERKILL",
		34: "MT_PVP_SUPERKILL_GUIDE",
		35: "MT_PVP_TEAM_DEATH_MATCH",
		36: "MT_FREE_PRACTICE",
		37: "MT_NoviceGuide",
		38: "MT_PVP_ELIMINATION_GAME",
		39: "MT_ARCADE",
		40: "MT_PVP_SUPERKILL_GVG",
		41: "MT_PVP_SUPERKILL_FRIENDPK",
		42: "MT_PVP_SUPERKILL_MULTI_FRIENDPK",
		43: "MT_PVP_TEAM_DEATH_MATCH_FRIENDPK",
		44: "MT_PVP_ELIMINATION_GAME_FRIENDPK",
		45: "MT_ELITE_FUBEN",
		46: "MT_EQUIP_FUBEN",
		47: "MT_MATERIAL_FUBEN",
		48: "MT_EXP_FUBEN",
		49: "MT_GOLD_FUBEN",
		50: "MT_SKILL_POINT_FUBEN",
		51: "MT_PVP_RANDOM",
		52: "MT_PVP_SUPERKILL_COMPETITION",
		53: "MT_PVP_SUPERKILL_MULTI_COMPETITION",
		54: "MT_PVP_TEAM_DEATH_MATCH_COMPETITION",
		55: "MT_PVP_ELIMINATION_GAME_COMPETITION",
		56: "MT_SIDE_FUBEN",
		57: "MT_PVP_WHEEL_WAR_3V3",
		58: "MT_GUILD_FUBEN",
		59: "MT_PVP_BARBARIAN_BATTLE",
		60: "MT_EMMT_MAX",
	}
	MissionType_value = map[string]int32{
		"MT_EMMT_MIN":                         0,
		"MT_MAIN_FUBEN":                       1,
		"MT_PLOT_FUBEN":                       2,
		"MT_ABYSS_FUBEN":                      3,
		"MT_ANCIENT_FUBEN":                    4,
		"MT_RAID_FUBEN":                       5,
		"MT_CLASSIC_PVP":                      6,
		"MT_UNKNOWN_LANDS":                    7,
		"MT_BOUNTY_FUBEN":                     8,
		"MT_CLASSIC_PVP_1V1":                  9,
		"MT_CLASSIC_PVP_3v3":                  10,
		"MT_CLASSIC_PVP_HeadCount":            11,
		"MT_CLASSIC_PVP_HeadCount_1V1":        12,
		"MT_RMODE_FUBEN":                      13,
		"MT_PVP_RoundBattle_1V1":              14,
		"MT_DAILY_FUBEN":                      15,
		"MT_PVP_Virtual_Tournament":           19,
		"MT_PVP_GroupBattle_2V2":              20,
		"MT_WEEKLY_FUBEN":                     21,
		"MT_DATA_TEST_FUBEN":                  22,
		"MT_PVP_Low_Rank_RoundBattle_1V1":     23,
		"MT_PVP_High_Rank_RoundBattle_1V1":    24,
		"MT_INFINITY_TOWER":                   25,
		"MT_ARCADE_GAME":                      26,
		"MT_RMODE_MONTH":                      27,
		"MT_RMODE_DAILY":                      28,
		"MT_RMODE_WEEK":                       29,
		"MT_GREAT_WALL_TRAINING":              30,
		"MT_PRACTICE":                         31,
		"MT_PVP_SUPERKILL_MULTI":              32,
		"MT_PVP_SUPERKILL":                    33,
		"MT_PVP_SUPERKILL_GUIDE":              34,
		"MT_PVP_TEAM_DEATH_MATCH":             35,
		"MT_FREE_PRACTICE":                    36,
		"MT_NoviceGuide":                      37,
		"MT_PVP_ELIMINATION_GAME":             38,
		"MT_ARCADE":                           39,
		"MT_PVP_SUPERKILL_GVG":                40,
		"MT_PVP_SUPERKILL_FRIENDPK":           41,
		"MT_PVP_SUPERKILL_MULTI_FRIENDPK":     42,
		"MT_PVP_TEAM_DEATH_MATCH_FRIENDPK":    43,
		"MT_PVP_ELIMINATION_GAME_FRIENDPK":    44,
		"MT_ELITE_FUBEN":                      45,
		"MT_EQUIP_FUBEN":                      46,
		"MT_MATERIAL_FUBEN":                   47,
		"MT_EXP_FUBEN":                        48,
		"MT_GOLD_FUBEN":                       49,
		"MT_SKILL_POINT_FUBEN":                50,
		"MT_PVP_RANDOM":                       51,
		"MT_PVP_SUPERKILL_COMPETITION":        52,
		"MT_PVP_SUPERKILL_MULTI_COMPETITION":  53,
		"MT_PVP_TEAM_DEATH_MATCH_COMPETITION": 54,
		"MT_PVP_ELIMINATION_GAME_COMPETITION": 55,
		"MT_SIDE_FUBEN":                       56,
		"MT_PVP_WHEEL_WAR_3V3":                57,
		"MT_GUILD_FUBEN":                      58,
		"MT_PVP_BARBARIAN_BATTLE":             59,
		"MT_EMMT_MAX":                         60,
	}
)

func (x MissionType) Enum() *MissionType {
	p := new(MissionType)
	*p = x
	return p
}

func (x MissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_cs_com_def_proto_enumTypes[1].Descriptor()
}

func (MissionType) Type() protoreflect.EnumType {
	return &file_cs_com_def_proto_enumTypes[1]
}

func (x MissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MissionType.Descriptor instead.
func (MissionType) EnumDescriptor() ([]byte, []int) {
	return file_cs_com_def_proto_rawDescGZIP(), []int{1}
}

// 匹配策略
type ENMMatchStrategy int32

const (
	ENMMatchStrategy_MatchStrategy_Unify          ENMMatchStrategy = 0 //无差别匹配
	ENMMatchStrategy_MatchStrategy_Glicko2        ENMMatchStrategy = 1 //Glicko2匹配
	ENMMatchStrategy_MatchStrategy_RoleHonorPower ENMMatchStrategy = 2 //英雄荣耀战力匹配
	ENMMatchStrategy_MatchStrategy_MMR            ENMMatchStrategy = 3 //MMR匹配
	ENMMatchStrategy_MatchStrategy_TrueSkill      ENMMatchStrategy = 4 //TrueSkill匹配
	ENMMatchStrategy_MatchStrategy_Max            ENMMatchStrategy = 5 //最大值
)

// Enum value maps for ENMMatchStrategy.
var (
	ENMMatchStrategy_name = map[int32]string{
		0: "MatchStrategy_Unify",
		1: "MatchStrategy_Glicko2",
		2: "MatchStrategy_RoleHonorPower",
		3: "MatchStrategy_MMR",
		4: "MatchStrategy_TrueSkill",
		5: "MatchStrategy_Max",
	}
	ENMMatchStrategy_value = map[string]int32{
		"MatchStrategy_Unify":          0,
		"MatchStrategy_Glicko2":        1,
		"MatchStrategy_RoleHonorPower": 2,
		"MatchStrategy_MMR":            3,
		"MatchStrategy_TrueSkill":      4,
		"MatchStrategy_Max":            5,
	}
)

func (x ENMMatchStrategy) Enum() *ENMMatchStrategy {
	p := new(ENMMatchStrategy)
	*p = x
	return p
}

func (x ENMMatchStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENMMatchStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_cs_com_def_proto_enumTypes[2].Descriptor()
}

func (ENMMatchStrategy) Type() protoreflect.EnumType {
	return &file_cs_com_def_proto_enumTypes[2]
}

func (x ENMMatchStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENMMatchStrategy.Descriptor instead.
func (ENMMatchStrategy) EnumDescriptor() ([]byte, []int) {
	return file_cs_com_def_proto_rawDescGZIP(), []int{2}
}

// 匹配范围
type ENMMatchScope int32

const (
	ENMMatchScope_MatchScope_Zone  ENMMatchScope = 0 //小区级匹配
	ENMMatchScope_MatchScope_World ENMMatchScope = 1 //大区级匹配
	ENMMatchScope_MatchScope_All   ENMMatchScope = 2 //全大区级匹配
	ENMMatchScope_MatchScope_Max   ENMMatchScope = 3 //最大值
)

// Enum value maps for ENMMatchScope.
var (
	ENMMatchScope_name = map[int32]string{
		0: "MatchScope_Zone",
		1: "MatchScope_World",
		2: "MatchScope_All",
		3: "MatchScope_Max",
	}
	ENMMatchScope_value = map[string]int32{
		"MatchScope_Zone":  0,
		"MatchScope_World": 1,
		"MatchScope_All":   2,
		"MatchScope_Max":   3,
	}
)

func (x ENMMatchScope) Enum() *ENMMatchScope {
	p := new(ENMMatchScope)
	*p = x
	return p
}

func (x ENMMatchScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENMMatchScope) Descriptor() protoreflect.EnumDescriptor {
	return file_cs_com_def_proto_enumTypes[3].Descriptor()
}

func (ENMMatchScope) Type() protoreflect.EnumType {
	return &file_cs_com_def_proto_enumTypes[3]
}

func (x ENMMatchScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENMMatchScope.Descriptor instead.
func (ENMMatchScope) EnumDescriptor() ([]byte, []int) {
	return file_cs_com_def_proto_rawDescGZIP(), []int{3}
}

// 匹配过滤器
type ENMMatchFilter int32

const (
	ENMMatchFilter_MatchFilter_MaxRoleNum        ENMMatchFilter = 0  //最大角色数过滤器
	ENMMatchFilter_MatchFilter_MaxLevelGap       ENMMatchFilter = 1  //最大等级差过滤器
	ENMMatchFilter_MatchFilter_VersionConsistent ENMMatchFilter = 2  //版本一致性过滤器 资源版本号
	ENMMatchFilter_MatchFilter_MaxRatingGap      ENMMatchFilter = 3  //Elo隐藏分过滤器
	ENMMatchFilter_MatchFilter_SelectedRole      ENMMatchFilter = 4  //已选角色滤器
	ENMMatchFilter_MatchFilter_MaxHornorPowerGap ENMMatchFilter = 5  //最大荣耀战力差过滤器
	ENMMatchFilter_MatchFilter_Platform          ENMMatchFilter = 6  //平台过滤器
	ENMMatchFilter_MatchFilter_MaxMMRGap         ENMMatchFilter = 7  //版本一致性过滤器
	ENMMatchFilter_MatchFilter_TryNoDupRole      ENMMatchFilter = 8  //优先匹配不重复角色过滤器
	ENMMatchFilter_MatchFilter_MatchVersion      ENMMatchFilter = 9  //上行版本一致过滤器 请求的版本号
	ENMMatchFilter_MatchFilter_TrySameCluster    ENMMatchFilter = 10 //优先匹配同一个选择同一个集群ID过滤器
	ENMMatchFilter_MatchFilter_DiffGuild         ENMMatchFilter = 11 //战队赛，相同战队不匹配
	ENMMatchFilter_MatchFilter_Max               ENMMatchFilter = 12 //最大值
)

// Enum value maps for ENMMatchFilter.
var (
	ENMMatchFilter_name = map[int32]string{
		0:  "MatchFilter_MaxRoleNum",
		1:  "MatchFilter_MaxLevelGap",
		2:  "MatchFilter_VersionConsistent",
		3:  "MatchFilter_MaxRatingGap",
		4:  "MatchFilter_SelectedRole",
		5:  "MatchFilter_MaxHornorPowerGap",
		6:  "MatchFilter_Platform",
		7:  "MatchFilter_MaxMMRGap",
		8:  "MatchFilter_TryNoDupRole",
		9:  "MatchFilter_MatchVersion",
		10: "MatchFilter_TrySameCluster",
		11: "MatchFilter_DiffGuild",
		12: "MatchFilter_Max",
	}
	ENMMatchFilter_value = map[string]int32{
		"MatchFilter_MaxRoleNum":        0,
		"MatchFilter_MaxLevelGap":       1,
		"MatchFilter_VersionConsistent": 2,
		"MatchFilter_MaxRatingGap":      3,
		"MatchFilter_SelectedRole":      4,
		"MatchFilter_MaxHornorPowerGap": 5,
		"MatchFilter_Platform":          6,
		"MatchFilter_MaxMMRGap":         7,
		"MatchFilter_TryNoDupRole":      8,
		"MatchFilter_MatchVersion":      9,
		"MatchFilter_TrySameCluster":    10,
		"MatchFilter_DiffGuild":         11,
		"MatchFilter_Max":               12,
	}
)

func (x ENMMatchFilter) Enum() *ENMMatchFilter {
	p := new(ENMMatchFilter)
	*p = x
	return p
}

func (x ENMMatchFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENMMatchFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_cs_com_def_proto_enumTypes[4].Descriptor()
}

func (ENMMatchFilter) Type() protoreflect.EnumType {
	return &file_cs_com_def_proto_enumTypes[4]
}

func (x ENMMatchFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENMMatchFilter.Descriptor instead.
func (ENMMatchFilter) EnumDescriptor() ([]byte, []int) {
	return file_cs_com_def_proto_rawDescGZIP(), []int{4}
}

// AI温暖局类型
type ENMAIWarmType int32

const (
	ENMAIWarmType_ENM_AI_NONE      ENMAIWarmType = 0 //@cname=无AI @display=无AI
	ENMAIWarmType_ENM_AI_NEWER     ENMAIWarmType = 1 //@cname=新手温暖局 @display=新手温暖局
	ENMAIWarmType_ENM_AI_DAILY     ENMAIWarmType = 2 //@cname=每日温暖局 @display=每日温暖局
	ENMAIWarmType_ENM_AI_TIMEOUT   ENMAIWarmType = 3 //@cname=匹配超时AI @display=匹配超时AI
	ENMAIWarmType_ENM_AI_CMD       ENMAIWarmType = 4 //@cname=cmd匹配AI @display=cmd匹配AI
	ENMAIWarmType_ENM_AI_RETURN    ENMAIWarmType = 5 //@cname=回归玩家 @display=回归玩家
	ENMAIWarmType_ENM_AI_TRAIN     ENMAIWarmType = 6 //@cname=训练局 @display=训练局
	ENMAIWarmType_ENM_AI_GUARANTEE ENMAIWarmType = 7 //@cname=保底AI @display=保底AI
	ENMAIWarmType_ENM_AI_RATING    ENMAIWarmType = 8 //@cname=AI评级 @display=AI评级
	ENMAIWarmType_ENM_AI_MAX       ENMAIWarmType = 9 //@cname=MAX @display=MAX
)

// Enum value maps for ENMAIWarmType.
var (
	ENMAIWarmType_name = map[int32]string{
		0: "ENM_AI_NONE",
		1: "ENM_AI_NEWER",
		2: "ENM_AI_DAILY",
		3: "ENM_AI_TIMEOUT",
		4: "ENM_AI_CMD",
		5: "ENM_AI_RETURN",
		6: "ENM_AI_TRAIN",
		7: "ENM_AI_GUARANTEE",
		8: "ENM_AI_RATING",
		9: "ENM_AI_MAX",
	}
	ENMAIWarmType_value = map[string]int32{
		"ENM_AI_NONE":      0,
		"ENM_AI_NEWER":     1,
		"ENM_AI_DAILY":     2,
		"ENM_AI_TIMEOUT":   3,
		"ENM_AI_CMD":       4,
		"ENM_AI_RETURN":    5,
		"ENM_AI_TRAIN":     6,
		"ENM_AI_GUARANTEE": 7,
		"ENM_AI_RATING":    8,
		"ENM_AI_MAX":       9,
	}
)

func (x ENMAIWarmType) Enum() *ENMAIWarmType {
	p := new(ENMAIWarmType)
	*p = x
	return p
}

func (x ENMAIWarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENMAIWarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_cs_com_def_proto_enumTypes[5].Descriptor()
}

func (ENMAIWarmType) Type() protoreflect.EnumType {
	return &file_cs_com_def_proto_enumTypes[5]
}

func (x ENMAIWarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENMAIWarmType.Descriptor instead.
func (ENMAIWarmType) EnumDescriptor() ([]byte, []int) {
	return file_cs_com_def_proto_rawDescGZIP(), []int{5}
}

var File_cs_com_def_proto protoreflect.FileDescriptor

var file_cs_com_def_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2a, 0x85, 0x0b, 0x0a, 0x16,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x63,
	0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45,
	0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f,
	0x47, 0x47, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x47, 0x47, 0x4c,
	0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f,
	0x47, 0x47, 0x4c, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x5f, 0x55, 0x50, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x47, 0x47,
	0x4c, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x4d, 0x41,
	0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x0f, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x10, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x47, 0x47, 0x4c,
	0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x12,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x13, 0x12,
	0x24, 0x0a, 0x20, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x43, 0x52, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x43, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x47, 0x47,
	0x4c, 0x45, 0x5f, 0x54, 0x43, 0x41, 0x50, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x42, 0x41, 0x47, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x49, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x52, 0x45,
	0x41, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x4f, 0x42, 0x4a, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x19, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x1a, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x47, 0x47, 0x4c,
	0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d,
	0x45, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x4c, 0x45,
	0x41, 0x56, 0x45, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x47, 0x47, 0x4c,
	0x45, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x43, 0x45,
	0x54, 0x10, 0x1f, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x4d, 0x44, 0x35, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x20, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x54, 0x52, 0x45, 0x53,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x21, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x47, 0x47,
	0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x22, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4f, 0x47, 0x47,
	0x4c, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x55, 0x54, 0x4c, 0x49, 0x5f,
	0x43, 0x45, 0x5f, 0x54, 0x4c, 0x4f, 0x47, 0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x56,
	0x50, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x25, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x26, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x56, 0x49,
	0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x28, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x29, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x47, 0x47, 0x4c,
	0x45, 0x5f, 0x50, 0x41, 0x4e, 0x44, 0x4f, 0x52, 0x41, 0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x47, 0x47, 0x4c,
	0x45, 0x5f, 0x54, 0x45, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x2d, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x58, 0x49, 0x4e,
	0x59, 0x55, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x2e, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x58, 0x49, 0x4e,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10,
	0x2f, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x30, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x31, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x32,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x33, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41,
	0x4c, 0x10, 0x34, 0x2a, 0xc1, 0x0b, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x4d, 0x54, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x50, 0x4c,
	0x4f, 0x54, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x54,
	0x5f, 0x41, 0x42, 0x59, 0x53, 0x53, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x41, 0x4e, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x42,
	0x45, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x50, 0x56, 0x50, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x54, 0x59, 0x5f, 0x46,
	0x55, 0x42, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x43, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x31, 0x56, 0x31, 0x10, 0x09, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x50, 0x56, 0x50,
	0x5f, 0x33, 0x76, 0x33, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x54, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x43, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x43, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x31, 0x56, 0x31, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x52, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x54,
	0x5f, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x31, 0x56, 0x31, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x54,
	0x5f, 0x50, 0x56, 0x50, 0x5f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x13, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x54, 0x5f,
	0x50, 0x56, 0x50, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x32, 0x56, 0x32, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x4c, 0x59, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x4c, 0x6f, 0x77,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x31, 0x56, 0x31, 0x10, 0x17, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x54, 0x5f, 0x50, 0x56,
	0x50, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x31, 0x56, 0x31, 0x10, 0x18, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x57,
	0x45, 0x52, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x41, 0x44,
	0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x52,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x1b, 0x12, 0x12, 0x0a, 0x0e,
	0x4d, 0x54, 0x5f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x1c,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x1e, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x5f, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x10, 0x1f,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4b, 0x49, 0x4c, 0x4c,
	0x10, 0x21, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x22, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x44, 0x45,
	0x41, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x10,
	0x24, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f,
	0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0x26, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x41, 0x44, 0x45, 0x10,
	0x27, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x55, 0x50, 0x45,
	0x52, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x47, 0x56, 0x47, 0x10, 0x28, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4b, 0x49, 0x4c, 0x4c, 0x5f,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x50, 0x4b, 0x10, 0x29, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x54,
	0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x50, 0x4b, 0x10, 0x2a, 0x12,
	0x24, 0x0a, 0x20, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x44,
	0x45, 0x41, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x50, 0x4b, 0x10, 0x2b, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f,
	0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x50, 0x4b, 0x10, 0x2c, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x54, 0x5f, 0x45, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x2d, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46, 0x55, 0x42, 0x45,
	0x4e, 0x10, 0x2e, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49,
	0x41, 0x4c, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x2f, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x54,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x54, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x31, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x32, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f,
	0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x33, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x34, 0x12, 0x26,
	0x0a, 0x22, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x35, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x36, 0x12,
	0x27, 0x0a, 0x23, 0x4d, 0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45,
	0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x37, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x38, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x54, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x48, 0x45, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x5f,
	0x33, 0x56, 0x33, 0x10, 0x39, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x3a, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x54, 0x5f,
	0x50, 0x56, 0x50, 0x5f, 0x42, 0x41, 0x52, 0x42, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x10, 0x3b, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x4d,
	0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x3c, 0x2a, 0xb3, 0x01, 0x0a, 0x10, 0x45, 0x4e, 0x4d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x55, 0x6e,
	0x69, 0x66, 0x79, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x47, 0x6c, 0x69, 0x63, 0x6b, 0x6f, 0x32, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x4d, 0x4d, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x54, 0x72, 0x75, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x05, 0x2a, 0x62, 0x0a,
	0x0d, 0x45, 0x4e, 0x4d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x5a, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x41, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x10,
	0x03, 0x2a, 0x8c, 0x03, 0x0a, 0x0e, 0x45, 0x4e, 0x4d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x61, 0x70, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x4d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x70, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x4d, 0x61, 0x78, 0x48,
	0x6f, 0x72, 0x6e, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x61, 0x70, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x4d, 0x61, 0x78, 0x4d, 0x4d, 0x52, 0x47,
	0x61, 0x70, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x54, 0x72, 0x79, 0x4e, 0x6f, 0x44, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65,
	0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x09,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x54, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x0a,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x44, 0x69, 0x66, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x0c,
	0x2a, 0xc6, 0x01, 0x0a, 0x0d, 0x45, 0x4e, 0x4d, 0x41, 0x49, 0x57, 0x61, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x4d, 0x5f, 0x41, 0x49, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x4d, 0x5f, 0x41, 0x49, 0x5f, 0x4e, 0x45,
	0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x4d, 0x5f, 0x41, 0x49, 0x5f,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x4d, 0x5f, 0x41,
	0x49, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x4e, 0x4d, 0x5f, 0x41, 0x49, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x4e, 0x4d, 0x5f, 0x41, 0x49, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x4e, 0x4d, 0x5f, 0x41, 0x49, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x4d, 0x5f, 0x41, 0x49, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x41,
	0x4e, 0x54, 0x45, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x4d, 0x5f, 0x41, 0x49,
	0x5f, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x4d,
	0x5f, 0x41, 0x49, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x09, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x65, 0x6e, 0x63, 0x68, 0x79, 0x2f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cs_com_def_proto_rawDescOnce sync.Once
	file_cs_com_def_proto_rawDescData = file_cs_com_def_proto_rawDesc
)

func file_cs_com_def_proto_rawDescGZIP() []byte {
	file_cs_com_def_proto_rawDescOnce.Do(func() {
		file_cs_com_def_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs_com_def_proto_rawDescData)
	})
	return file_cs_com_def_proto_rawDescData
}

var file_cs_com_def_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_cs_com_def_proto_goTypes = []interface{}{
	(FeatureToggleMacroType)(0), // 0: testxml.FeatureToggleMacroType
	(MissionType)(0),            // 1: testxml.MissionType
	(ENMMatchStrategy)(0),       // 2: testxml.ENMMatchStrategy
	(ENMMatchScope)(0),          // 3: testxml.ENMMatchScope
	(ENMMatchFilter)(0),         // 4: testxml.ENMMatchFilter
	(ENMAIWarmType)(0),          // 5: testxml.ENMAIWarmType
}
var file_cs_com_def_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cs_com_def_proto_init() }
func file_cs_com_def_proto_init() {
	if File_cs_com_def_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs_com_def_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cs_com_def_proto_goTypes,
		DependencyIndexes: file_cs_com_def_proto_depIdxs,
		EnumInfos:         file_cs_com_def_proto_enumTypes,
	}.Build()
	File_cs_com_def_proto = out.File
	file_cs_com_def_proto_rawDesc = nil
	file_cs_com_def_proto_goTypes = nil
	file_cs_com_def_proto_depIdxs = nil
}
