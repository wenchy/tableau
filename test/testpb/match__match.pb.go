// Generated by tableauc 0.1.0. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: match__match.proto

package testpb

import (
	_ "github.com/Wenchy/tableau/proto/tableaupb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmTimeOutPunishTime    int32          `protobuf:"varint,1,opt,name=confirm_time_out_punish_time,json=confirmTimeOutPunishTime,proto3" json:"confirm_time_out_punish_time,omitempty"`
	MatchRoomMaxLoop            int32          `protobuf:"varint,2,opt,name=match_room_max_loop,json=matchRoomMaxLoop,proto3" json:"match_room_max_loop,omitempty"`
	MatchPlayerMaxLoop          int32          `protobuf:"varint,3,opt,name=match_player_max_loop,json=matchPlayerMaxLoop,proto3" json:"match_player_max_loop,omitempty"`
	MatchStatInfoReportInterval int32          `protobuf:"varint,4,opt,name=match_stat_info_report_interval,json=matchStatInfoReportInterval,proto3" json:"match_stat_info_report_interval,omitempty"`
	MatchModeMissionType        string         `protobuf:"bytes,5,opt,name=match_mode_mission_type,json=matchModeMissionType,proto3" json:"match_mode_mission_type,omitempty"`
	Time                        *MatchCfg_Time `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *MatchCfg) Reset() {
	*x = MatchCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg) ProtoMessage() {}

func (x *MatchCfg) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg.ProtoReflect.Descriptor instead.
func (*MatchCfg) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0}
}

func (x *MatchCfg) GetConfirmTimeOutPunishTime() int32 {
	if x != nil {
		return x.ConfirmTimeOutPunishTime
	}
	return 0
}

func (x *MatchCfg) GetMatchRoomMaxLoop() int32 {
	if x != nil {
		return x.MatchRoomMaxLoop
	}
	return 0
}

func (x *MatchCfg) GetMatchPlayerMaxLoop() int32 {
	if x != nil {
		return x.MatchPlayerMaxLoop
	}
	return 0
}

func (x *MatchCfg) GetMatchStatInfoReportInterval() int32 {
	if x != nil {
		return x.MatchStatInfoReportInterval
	}
	return 0
}

func (x *MatchCfg) GetMatchModeMissionType() string {
	if x != nil {
		return x.MatchModeMissionType
	}
	return ""
}

func (x *MatchCfg) GetTime() *MatchCfg_Time {
	if x != nil {
		return x.Time
	}
	return nil
}

type MatchCfg_Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HModeTimeMinTime     int32               `protobuf:"varint,1,opt,name=h_mode_time_min_time,json=hModeTimeMinTime,proto3" json:"h_mode_time_min_time,omitempty"`
	HModeTimeMaxTime     int32               `protobuf:"varint,2,opt,name=h_mode_time_max_time,json=hModeTimeMaxTime,proto3" json:"h_mode_time_max_time,omitempty"`
	HModeTimeFreq        int32               `protobuf:"varint,3,opt,name=h_mode_time_freq,json=hModeTimeFreq,proto3" json:"h_mode_time_freq,omitempty"`
	HModeTimeConfirmTime int32               `protobuf:"varint,4,opt,name=h_mode_time_confirm_time,json=hModeTimeConfirmTime,proto3" json:"h_mode_time_confirm_time,omitempty"`
	Open                 *MatchCfg_Time_Open `protobuf:"bytes,5,opt,name=open,proto3" json:"open,omitempty"`
}

func (x *MatchCfg_Time) Reset() {
	*x = MatchCfg_Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time) ProtoMessage() {}

func (x *MatchCfg_Time) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MatchCfg_Time) GetHModeTimeMinTime() int32 {
	if x != nil {
		return x.HModeTimeMinTime
	}
	return 0
}

func (x *MatchCfg_Time) GetHModeTimeMaxTime() int32 {
	if x != nil {
		return x.HModeTimeMaxTime
	}
	return 0
}

func (x *MatchCfg_Time) GetHModeTimeFreq() int32 {
	if x != nil {
		return x.HModeTimeFreq
	}
	return 0
}

func (x *MatchCfg_Time) GetHModeTimeConfirmTime() int32 {
	if x != nil {
		return x.HModeTimeConfirmTime
	}
	return 0
}

func (x *MatchCfg_Time) GetOpen() *MatchCfg_Time_Open {
	if x != nil {
		return x.Open
	}
	return nil
}

type MatchCfg_Time_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EOpenBeginDate int32                      `protobuf:"varint,1,opt,name=e_open_begin_date,json=eOpenBeginDate,proto3" json:"e_open_begin_date,omitempty"`
	EOpenBeginTime int32                      `protobuf:"varint,2,opt,name=e_open_begin_time,json=eOpenBeginTime,proto3" json:"e_open_begin_time,omitempty"`
	EOpenEndDate   int32                      `protobuf:"varint,3,opt,name=e_open_end_date,json=eOpenEndDate,proto3" json:"e_open_end_date,omitempty"`
	EOpenEndTime   int32                      `protobuf:"varint,4,opt,name=e_open_end_time,json=eOpenEndTime,proto3" json:"e_open_end_time,omitempty"`
	CampList       []*MatchCfg_Time_Open_Camp `protobuf:"bytes,5,rep,name=camp_list,json=campList,proto3" json:"camp_list,omitempty"`
}

func (x *MatchCfg_Time_Open) Reset() {
	*x = MatchCfg_Time_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open) ProtoMessage() {}

func (x *MatchCfg_Time_Open) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MatchCfg_Time_Open) GetEOpenBeginDate() int32 {
	if x != nil {
		return x.EOpenBeginDate
	}
	return 0
}

func (x *MatchCfg_Time_Open) GetEOpenBeginTime() int32 {
	if x != nil {
		return x.EOpenBeginTime
	}
	return 0
}

func (x *MatchCfg_Time_Open) GetEOpenEndDate() int32 {
	if x != nil {
		return x.EOpenEndDate
	}
	return 0
}

func (x *MatchCfg_Time_Open) GetEOpenEndTime() int32 {
	if x != nil {
		return x.EOpenEndTime
	}
	return 0
}

func (x *MatchCfg_Time_Open) GetCampList() []*MatchCfg_Time_Open_Camp {
	if x != nil {
		return x.CampList
	}
	return nil
}

type MatchCfg_Time_Open_Camp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ECampCampId    int32                             `protobuf:"varint,1,opt,name=e_camp_camp_id,json=eCampCampId,proto3" json:"e_camp_camp_id,omitempty"`
	ECampPlayerNum int32                             `protobuf:"varint,2,opt,name=e_camp_player_num,json=eCampPlayerNum,proto3" json:"e_camp_player_num,omitempty"`
	Strategy       *MatchCfg_Time_Open_Camp_Strategy `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Scope          *MatchCfg_Time_Open_Camp_Scope    `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	FilterList     []*MatchCfg_Time_Open_Camp_Filter `protobuf:"bytes,5,rep,name=filter_list,json=filterList,proto3" json:"filter_list,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp) Reset() {
	*x = MatchCfg_Time_Open_Camp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *MatchCfg_Time_Open_Camp) GetECampCampId() int32 {
	if x != nil {
		return x.ECampCampId
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp) GetECampPlayerNum() int32 {
	if x != nil {
		return x.ECampPlayerNum
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp) GetStrategy() *MatchCfg_Time_Open_Camp_Strategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *MatchCfg_Time_Open_Camp) GetScope() *MatchCfg_Time_Open_Camp_Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MatchCfg_Time_Open_Camp) GetFilterList() []*MatchCfg_Time_Open_Camp_Filter {
	if x != nil {
		return x.FilterList
	}
	return nil
}

type MatchCfg_Time_Open_Camp_Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YStrategyId string `protobuf:"bytes,1,opt,name=y_strategy_id,json=yStrategyId,proto3" json:"y_strategy_id,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Strategy) Reset() {
	*x = MatchCfg_Time_Open_Camp_Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Strategy) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Strategy.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Strategy) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *MatchCfg_Time_Open_Camp_Strategy) GetYStrategyId() string {
	if x != nil {
		return x.YStrategyId
	}
	return ""
}

type MatchCfg_Time_Open_Camp_Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EScopeId string `protobuf:"bytes,1,opt,name=e_scope_id,json=eScopeId,proto3" json:"e_scope_id,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Scope) Reset() {
	*x = MatchCfg_Time_Open_Camp_Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Scope) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Scope) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Scope.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Scope) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *MatchCfg_Time_Open_Camp_Scope) GetEScopeId() string {
	if x != nil {
		return x.EScopeId
	}
	return ""
}

type MatchCfg_Time_Open_Camp_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EFilterFilterId    string                                  `protobuf:"bytes,1,opt,name=e_filter_filter_id,json=eFilterFilterId,proto3" json:"e_filter_filter_id,omitempty"`
	EFilterOpen        int32                                   `protobuf:"varint,2,opt,name=e_filter_open,json=eFilterOpen,proto3" json:"e_filter_open,omitempty"`
	EFilterValue       int32                                   `protobuf:"varint,3,opt,name=e_filter_value,json=eFilterValue,proto3" json:"e_filter_value,omitempty"`
	EFilterUpdInterval int32                                   `protobuf:"varint,4,opt,name=e_filter_upd_interval,json=eFilterUpdInterval,proto3" json:"e_filter_upd_interval,omitempty"`
	ParamList          []*MatchCfg_Time_Open_Camp_Filter_Param `protobuf:"bytes,5,rep,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2}
}

func (x *MatchCfg_Time_Open_Camp_Filter) GetEFilterFilterId() string {
	if x != nil {
		return x.EFilterFilterId
	}
	return ""
}

func (x *MatchCfg_Time_Open_Camp_Filter) GetEFilterOpen() int32 {
	if x != nil {
		return x.EFilterOpen
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter) GetEFilterValue() int32 {
	if x != nil {
		return x.EFilterValue
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter) GetEFilterUpdInterval() int32 {
	if x != nil {
		return x.EFilterUpdInterval
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter) GetParamList() []*MatchCfg_Time_Open_Camp_Filter_Param {
	if x != nil {
		return x.ParamList
	}
	return nil
}

type MatchCfg_Time_Open_Camp_Filter_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EFilterParamRankLimit int32                                         `protobuf:"varint,1,opt,name=e_filter_param_rank_limit,json=eFilterParamRankLimit,proto3" json:"e_filter_param_rank_limit,omitempty"`
	EFilterParamValue     int32                                         `protobuf:"varint,2,opt,name=e_filter_param_value,json=eFilterParamValue,proto3" json:"e_filter_param_value,omitempty"`
	Route                 *MatchCfg_Time_Open_Camp_Filter_Param_Route   `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	MatchAi               *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI `protobuf:"bytes,4,opt,name=match_ai,json=matchAi,proto3" json:"match_ai,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter_Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter_Param) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Filter_Param) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter_Param.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter_Param) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param) GetEFilterParamRankLimit() int32 {
	if x != nil {
		return x.EFilterParamRankLimit
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param) GetEFilterParamValue() int32 {
	if x != nil {
		return x.EFilterParamValue
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param) GetRoute() *MatchCfg_Time_Open_Camp_Filter_Param_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param) GetMatchAi() *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI {
	if x != nil {
		return x.MatchAi
	}
	return nil
}

type MatchCfg_Time_Open_Camp_Filter_Param_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EKey int32 `protobuf:"varint,1,opt,name=e_key,json=eKey,proto3" json:"e_key,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_Route) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter_Param_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter_Param_Route) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_Route) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter_Param_Route.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter_Param_Route) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0, 0}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_Route) GetEKey() int32 {
	if x != nil {
		return x.EKey
	}
	return 0
}

type MatchCfg_Time_Open_Camp_Filter_Param_MatchAI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IIsOpen            int32                                              `protobuf:"varint,1,opt,name=i_is_open,json=iIsOpen,proto3" json:"i_is_open,omitempty"`
	IPlayerOnlyOneCamp int32                                              `protobuf:"varint,2,opt,name=i_player_only_one_camp,json=iPlayerOnlyOneCamp,proto3" json:"i_player_only_one_camp,omitempty"`
	IGuaranteeAiRatio  int32                                              `protobuf:"varint,3,opt,name=i_guarantee_ai_ratio,json=iGuaranteeAiRatio,proto3" json:"i_guarantee_ai_ratio,omitempty"`
	AiList             []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI `protobuf:"bytes,4,rep,name=ai_list,json=aiList,proto3" json:"ai_list,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter_Param_MatchAI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter_Param_MatchAI.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0, 1}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI) GetIIsOpen() int32 {
	if x != nil {
		return x.IIsOpen
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI) GetIPlayerOnlyOneCamp() int32 {
	if x != nil {
		return x.IPlayerOnlyOneCamp
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI) GetIGuaranteeAiRatio() int32 {
	if x != nil {
		return x.IGuaranteeAiRatio
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI) GetAiList() []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI {
	if x != nil {
		return x.AiList
	}
	return nil
}

type MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IaiType    string                                                    `protobuf:"bytes,1,opt,name=iai_type,json=iaiType,proto3" json:"iai_type,omitempty"`
	IaiIsOpen  int32                                                     `protobuf:"varint,2,opt,name=iai_is_open,json=iaiIsOpen,proto3" json:"iai_is_open,omitempty"`
	IaiMinTime int32                                                     `protobuf:"varint,3,opt,name=iai_min_time,json=iaiMinTime,proto3" json:"iai_min_time,omitempty"`
	IaiMaxTime int32                                                     `protobuf:"varint,4,opt,name=iai_max_time,json=iaiMaxTime,proto3" json:"iai_max_time,omitempty"`
	WeightList []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight `protobuf:"bytes,5,rep,name=weight_list,json=weightList,proto3" json:"weight_list,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0, 1, 0}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) GetIaiType() string {
	if x != nil {
		return x.IaiType
	}
	return ""
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) GetIaiIsOpen() int32 {
	if x != nil {
		return x.IaiIsOpen
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) GetIaiMinTime() int32 {
	if x != nil {
		return x.IaiMinTime
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) GetIaiMaxTime() int32 {
	if x != nil {
		return x.IaiMaxTime
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI) GetWeightList() []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight {
	if x != nil {
		return x.WeightList
	}
	return nil
}

type MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamRatingWeightWeightNum int32                                                           `protobuf:"varint,1,opt,name=team_rating_weight_weight_num,json=teamRatingWeightWeightNum,proto3" json:"team_rating_weight_weight_num,omitempty"`
	ParamList                 []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param `protobuf:"bytes,2,rep,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0, 1, 0, 0}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight) GetTeamRatingWeightWeightNum() int32 {
	if x != nil {
		return x.TeamRatingWeightWeightNum
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight) GetParamList() []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param {
	if x != nil {
		return x.ParamList
	}
	return nil
}

type MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamRatingWeightWeightParamValue int32                                                                  `protobuf:"varint,1,opt,name=team_rating_weight_weight_param_value,json=teamRatingWeightWeightParamValue,proto3" json:"team_rating_weight_weight_param_value,omitempty"`
	RandomList                       []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random `protobuf:"bytes,2,rep,name=random_list,json=randomList,proto3" json:"random_list,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0, 1, 0, 0, 0}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param) GetTeamRatingWeightWeightParamValue() int32 {
	if x != nil {
		return x.TeamRatingWeightWeightParamValue
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param) GetRandomList() []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random {
	if x != nil {
		return x.RandomList
	}
	return nil
}

type MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchModeRandomMissionType string                                                                       `protobuf:"bytes,1,opt,name=match_mode_random_mission_type,json=matchModeRandomMissionType,proto3" json:"match_mode_random_mission_type,omitempty"`
	MatchModeRandomPriority    int32                                                                        `protobuf:"varint,2,opt,name=match_mode_random_priority,json=matchModeRandomPriority,proto3" json:"match_mode_random_priority,omitempty"`
	PowerList                  []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power `protobuf:"bytes,3,rep,name=power_list,json=powerList,proto3" json:"power_list,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random) GetMatchModeRandomMissionType() string {
	if x != nil {
		return x.MatchModeRandomMissionType
	}
	return ""
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random) GetMatchModeRandomPriority() int32 {
	if x != nil {
		return x.MatchModeRandomPriority
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random) GetPowerList() []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power {
	if x != nil {
		return x.PowerList
	}
	return nil
}

type MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchModeFilterPowerHornorPower int32                                                                              `protobuf:"varint,1,opt,name=match_mode_filter_power_hornor_power,json=matchModeFilterPowerHornorPower,proto3" json:"match_mode_filter_power_hornor_power,omitempty"`
	ParamList                       []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param `protobuf:"bytes,2,rep,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power) ProtoMessage() {}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power) GetMatchModeFilterPowerHornorPower() int32 {
	if x != nil {
		return x.MatchModeFilterPowerHornorPower
	}
	return 0
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power) GetParamList() []*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param {
	if x != nil {
		return x.ParamList
	}
	return nil
}

type MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchModeFilterPowerParamValue int32 `protobuf:"varint,1,opt,name=match_mode_filter_power_param_value,json=matchModeFilterPowerParamValue,proto3" json:"match_mode_filter_power_param_value,omitempty"`
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param) Reset() {
	*x = MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match__match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param) ProtoMessage() {
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param) ProtoReflect() protoreflect.Message {
	mi := &file_match__match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param.ProtoReflect.Descriptor instead.
func (*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param) Descriptor() ([]byte, []int) {
	return file_match__match_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0}
}

func (x *MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param) GetMatchModeFilterPowerParamValue() int32 {
	if x != nil {
		return x.MatchModeFilterPowerParamValue
	}
	return 0
}

var File_match__match_proto protoreflect.FileDescriptor

var file_match__match_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x1a, 0x1e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x21,
	0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x12, 0x5e, 0x0a, 0x1c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74,
	0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x52,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x6f,
	0x70, 0x12, 0x4b, 0x0a, 0x15, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x67,
	0x0a, 0x1f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x0a, 0x1b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x1b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x82, 0xb5, 0x18, 0x16, 0x0a, 0x14,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78,
	0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x4d, 0x61, 0x74, 0x63, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x1a, 0x87, 0x1d, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x14, 0x68,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x0a,
	0x10, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x10, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x14, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x68,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x71, 0x52, 0x0d, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x18, 0x68, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x82, 0xb5, 0x18,
	0x16, 0x0a, 0x14, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x14, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04,
	0x68, 0x4d, 0x6f, 0x64, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x1a, 0x9f, 0x1a, 0x0a, 0x04, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x11, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14,
	0x82, 0xb5, 0x18, 0x10, 0x0a, 0x0e, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x14, 0x82, 0xb5, 0x18, 0x10, 0x0a, 0x0e, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0f, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12,
	0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x0f, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a,
	0x0c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x63,
	0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66,
	0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x28, 0x01, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0xd7, 0x17, 0x0a, 0x04, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x0e, 0x65,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x0b, 0x65, 0x43, 0x61, 0x6d, 0x70,
	0x43, 0x61, 0x6d, 0x70, 0x49, 0x44, 0x52, 0x0b, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x61, 0x6d,
	0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x11, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14,
	0x82, 0xb5, 0x18, 0x10, 0x0a, 0x0e, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x52, 0x0e, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x55, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x41, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x82, 0xb5, 0x18,
	0x0d, 0x0a, 0x0b, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x52, 0x0b,
	0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x1a, 0x35, 0x0a, 0x05, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x52, 0x08, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x1a, 0xe7, 0x13, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x12, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x82, 0xb5, 0x18, 0x11, 0x0a,
	0x0f, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x0f, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x0d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x0b,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x0b, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4b, 0x0a, 0x15, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x12, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x54, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x84, 0x11, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x55, 0x0a, 0x19, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x0a, 0x15, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x15, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x61, 0x6e,
	0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x14, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x56, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x66, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x49, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x07, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x69, 0x1a, 0x28, 0x0a, 0x05, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x65,
	0x4b, 0x65, 0x79, 0x1a, 0xf6, 0x0d, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x12,
	0x29, 0x0a, 0x09, 0x69, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x07, 0x49, 0x49, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x07, 0x69, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x16, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14,
	0x0a, 0x12, 0x49, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e, 0x65,
	0x43, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x69, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x79, 0x4f, 0x6e, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x14, 0x69, 0x5f, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x49, 0x47,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x41, 0x49, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52,
	0x11, 0x69, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x41, 0x69, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x59, 0x0a, 0x07, 0x61, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x2e, 0x41, 0x49, 0x42, 0x06, 0x82,
	0xb5, 0x18, 0x02, 0x28, 0x01, 0x52, 0x06, 0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xcc, 0x0b,
	0x0a, 0x02, 0x41, 0x49, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x61, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x07, 0x49, 0x41,
	0x49, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x69, 0x61, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x0b, 0x69, 0x61, 0x69, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09, 0x49, 0x41, 0x49, 0x49, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x09, 0x69, 0x61, 0x69, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x32, 0x0a, 0x0c, 0x69, 0x61, 0x69, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x0a, 0x49, 0x41, 0x49,
	0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x69, 0x61, 0x69, 0x4d, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a,
	0x0a, 0x49, 0x41, 0x49, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x69, 0x61, 0x69,
	0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x49, 0x2e, 0x41, 0x49, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x06, 0x82,
	0xb5, 0x18, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x98, 0x09, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x61, 0x0a, 0x1d,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x0a, 0x19, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x75, 0x6d, 0x52, 0x19, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x6c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x2e, 0x41, 0x49, 0x2e, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02,
	0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xbc, 0x07,
	0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x77, 0x0a, 0x25, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x0a, 0x20, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x75, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x2e, 0x41, 0x49, 0x2e,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xc2, 0x05, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x12, 0x64, 0x0a, 0x1e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c,
	0x0a, 0x1a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x1a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0x82, 0xb5,
	0x18, 0x19, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x17, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x79, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78,
	0x6d, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x2e,
	0x41, 0x49, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x06, 0x82, 0xb5,
	0x18, 0x02, 0x28, 0x01, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0xfa, 0x02, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x24, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x0a, 0x1f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x48, 0x6f, 0x72, 0x6e, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x1f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x48, 0x6f, 0x72, 0x6e, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x7f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x78, 0x6d, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x2e, 0x41, 0x49, 0x2e, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x06, 0x82,
	0xb5, 0x18, 0x02, 0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0x7a, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x71, 0x0a, 0x23, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x0a, 0x1e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x1a, 0x82, 0xb5,
	0x18, 0x16, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x10, 0x01, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x40, 0x01, 0x48, 0x01, 0x42, 0x41, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x65, 0x6e, 0x63, 0x68, 0x79, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x62, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x78, 0x6c, 0x73, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_match__match_proto_rawDescOnce sync.Once
	file_match__match_proto_rawDescData = file_match__match_proto_rawDesc
)

func file_match__match_proto_rawDescGZIP() []byte {
	file_match__match_proto_rawDescOnce.Do(func() {
		file_match__match_proto_rawDescData = protoimpl.X.CompressGZIP(file_match__match_proto_rawDescData)
	})
	return file_match__match_proto_rawDescData
}

var file_match__match_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_match__match_proto_goTypes = []interface{}{
	(*MatchCfg)(nil),                                                                        // 0: testxml.MatchCfg
	(*MatchCfg_Time)(nil),                                                                   // 1: testxml.MatchCfg.Time
	(*MatchCfg_Time_Open)(nil),                                                              // 2: testxml.MatchCfg.Time.Open
	(*MatchCfg_Time_Open_Camp)(nil),                                                         // 3: testxml.MatchCfg.Time.Open.Camp
	(*MatchCfg_Time_Open_Camp_Strategy)(nil),                                                // 4: testxml.MatchCfg.Time.Open.Camp.Strategy
	(*MatchCfg_Time_Open_Camp_Scope)(nil),                                                   // 5: testxml.MatchCfg.Time.Open.Camp.Scope
	(*MatchCfg_Time_Open_Camp_Filter)(nil),                                                  // 6: testxml.MatchCfg.Time.Open.Camp.Filter
	(*MatchCfg_Time_Open_Camp_Filter_Param)(nil),                                            // 7: testxml.MatchCfg.Time.Open.Camp.Filter.Param
	(*MatchCfg_Time_Open_Camp_Filter_Param_Route)(nil),                                      // 8: testxml.MatchCfg.Time.Open.Camp.Filter.Param.Route
	(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI)(nil),                                    // 9: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI
	(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI)(nil),                                 // 10: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI
	(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight)(nil),                          // 11: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight
	(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param)(nil),                    // 12: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param
	(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random)(nil),             // 13: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param.Random
	(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power)(nil),       // 14: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param.Random.Power
	(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param)(nil), // 15: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param.Random.Power.Param
}
var file_match__match_proto_depIdxs = []int32{
	1,  // 0: testxml.MatchCfg.time:type_name -> testxml.MatchCfg.Time
	2,  // 1: testxml.MatchCfg.Time.open:type_name -> testxml.MatchCfg.Time.Open
	3,  // 2: testxml.MatchCfg.Time.Open.camp_list:type_name -> testxml.MatchCfg.Time.Open.Camp
	4,  // 3: testxml.MatchCfg.Time.Open.Camp.strategy:type_name -> testxml.MatchCfg.Time.Open.Camp.Strategy
	5,  // 4: testxml.MatchCfg.Time.Open.Camp.scope:type_name -> testxml.MatchCfg.Time.Open.Camp.Scope
	6,  // 5: testxml.MatchCfg.Time.Open.Camp.filter_list:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter
	7,  // 6: testxml.MatchCfg.Time.Open.Camp.Filter.param_list:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter.Param
	8,  // 7: testxml.MatchCfg.Time.Open.Camp.Filter.Param.route:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter.Param.Route
	9,  // 8: testxml.MatchCfg.Time.Open.Camp.Filter.Param.match_ai:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI
	10, // 9: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.ai_list:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI
	11, // 10: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.weight_list:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight
	12, // 11: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.param_list:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param
	13, // 12: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param.random_list:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param.Random
	14, // 13: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param.Random.power_list:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param.Random.Power
	15, // 14: testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param.Random.Power.param_list:type_name -> testxml.MatchCfg.Time.Open.Camp.Filter.Param.MatchAI.AI.Weight.Param.Random.Power.Param
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_match__match_proto_init() }
func file_match__match_proto_init() {
	if File_match__match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_match__match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter_Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter_Param_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match__match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfg_Time_Open_Camp_Filter_Param_MatchAI_AI_Weight_Param_Random_Power_Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match__match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match__match_proto_goTypes,
		DependencyIndexes: file_match__match_proto_depIdxs,
		MessageInfos:      file_match__match_proto_msgTypes,
	}.Build()
	File_match__match_proto = out.File
	file_match__match_proto_rawDesc = nil
	file_match__match_proto_goTypes = nil
	file_match__match_proto_depIdxs = nil
}
