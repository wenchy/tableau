// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: test_conf.proto

package testpb

import (
	_ "github.com/Wenchy/tableau/pkg/tableaupb"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ItemConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemMap map[int32]*ItemConf_Row `protobuf:"bytes,1,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ItemConf) Reset() {
	*x = ItemConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf) ProtoMessage() {}

func (x *ItemConf) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf.ProtoReflect.Descriptor instead.
func (*ItemConf) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{0}
}

func (x *ItemConf) GetItemMap() map[int32]*ItemConf_Row {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type ActivityConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityMap map[int32]*ActivityConf_Activity `protobuf:"bytes,1,rep,name=activity_map,json=activityMap,proto3" json:"activity_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ActivityConf) Reset() {
	*x = ActivityConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityConf) ProtoMessage() {}

func (x *ActivityConf) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityConf.ProtoReflect.Descriptor instead.
func (*ActivityConf) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{1}
}

func (x *ActivityConf) GetActivityMap() map[int32]*ActivityConf_Activity {
	if x != nil {
		return x.ActivityMap
	}
	return nil
}

type EnvConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldId       int32           `protobuf:"varint,1,opt,name=world_id,json=worldId,proto3" json:"world_id,omitempty"`
	ZoneId        int32           `protobuf:"varint,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	PlatformType  int32           `protobuf:"varint,3,opt,name=platform_type,json=platformType,proto3" json:"platform_type,omitempty"`
	Name          string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	NewbieItemMap map[int32]int32 `protobuf:"bytes,5,rep,name=newbie_item_map,json=newbieItemMap,proto3" json:"newbie_item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Basic1        *EnvConf_Basic  `protobuf:"bytes,6,opt,name=basic1,proto3" json:"basic1,omitempty"`
	Basic2        *EnvConf_Basic  `protobuf:"bytes,7,opt,name=basic2,proto3" json:"basic2,omitempty"`
	Ratio         float32         `protobuf:"fixed32,8,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Coefficent    float64         `protobuf:"fixed64,9,opt,name=coefficent,proto3" json:"coefficent,omitempty"`
}

func (x *EnvConf) Reset() {
	*x = EnvConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvConf) ProtoMessage() {}

func (x *EnvConf) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvConf.ProtoReflect.Descriptor instead.
func (*EnvConf) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{2}
}

func (x *EnvConf) GetWorldId() int32 {
	if x != nil {
		return x.WorldId
	}
	return 0
}

func (x *EnvConf) GetZoneId() int32 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *EnvConf) GetPlatformType() int32 {
	if x != nil {
		return x.PlatformType
	}
	return 0
}

func (x *EnvConf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvConf) GetNewbieItemMap() map[int32]int32 {
	if x != nil {
		return x.NewbieItemMap
	}
	return nil
}

func (x *EnvConf) GetBasic1() *EnvConf_Basic {
	if x != nil {
		return x.Basic1
	}
	return nil
}

func (x *EnvConf) GetBasic2() *EnvConf_Basic {
	if x != nil {
		return x.Basic2
	}
	return nil
}

func (x *EnvConf) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *EnvConf) GetCoefficent() float64 {
	if x != nil {
		return x.Coefficent
	}
	return 0
}

type MailConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailMap map[int32]*MailConf_Row `protobuf:"bytes,1,rep,name=mail_map,json=mailMap,proto3" json:"mail_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // default: [(tableau.field).key = "Key"];
}

func (x *MailConf) Reset() {
	*x = MailConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailConf) ProtoMessage() {}

func (x *MailConf) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailConf.ProtoReflect.Descriptor instead.
func (*MailConf) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{3}
}

func (x *MailConf) GetMailMap() map[int32]*MailConf_Row {
	if x != nil {
		return x.MailMap
	}
	return nil
}

type ItemConf_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc       string                `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	IconId     int32                 `protobuf:"varint,4,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
	Attributes []*ItemConf_Attribute `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty"`
	SaleMap    map[int32]int32       `protobuf:"bytes,6,rep,name=sale_map,json=saleMap,proto3" json:"sale_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Effects    []int32               `protobuf:"varint,7,rep,packed,name=effects,proto3" json:"effects,omitempty"`
	ExpiryTime *timestamp.Timestamp  `protobuf:"bytes,8,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	Duration   *duration.Duration    `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ItemConf_Row) Reset() {
	*x = ItemConf_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf_Row) ProtoMessage() {}

func (x *ItemConf_Row) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf_Row.ProtoReflect.Descriptor instead.
func (*ItemConf_Row) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ItemConf_Row) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemConf_Row) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemConf_Row) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ItemConf_Row) GetIconId() int32 {
	if x != nil {
		return x.IconId
	}
	return 0
}

func (x *ItemConf_Row) GetAttributes() []*ItemConf_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ItemConf_Row) GetSaleMap() map[int32]int32 {
	if x != nil {
		return x.SaleMap
	}
	return nil
}

func (x *ItemConf_Row) GetEffects() []int32 {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *ItemConf_Row) GetExpiryTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *ItemConf_Row) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type ItemConf_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value        int32                    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Enhancements []*ItemConf_Enhancement  `protobuf:"bytes,3,rep,name=enhancements,proto3" json:"enhancements,omitempty"`
	CostMap      map[int32]*ItemConf_Cost `protobuf:"bytes,4,rep,name=cost_map,json=costMap,proto3" json:"cost_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ItemConf_Attribute) Reset() {
	*x = ItemConf_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf_Attribute) ProtoMessage() {}

func (x *ItemConf_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf_Attribute.ProtoReflect.Descriptor instead.
func (*ItemConf_Attribute) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ItemConf_Attribute) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemConf_Attribute) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ItemConf_Attribute) GetEnhancements() []*ItemConf_Enhancement {
	if x != nil {
		return x.Enhancements
	}
	return nil
}

func (x *ItemConf_Attribute) GetCostMap() map[int32]*ItemConf_Cost {
	if x != nil {
		return x.CostMap
	}
	return nil
}

type ItemConf_Enhancement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Tips []string `protobuf:"bytes,3,rep,name=tips,proto3" json:"tips,omitempty"`
}

func (x *ItemConf_Enhancement) Reset() {
	*x = ItemConf_Enhancement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf_Enhancement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf_Enhancement) ProtoMessage() {}

func (x *ItemConf_Enhancement) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf_Enhancement.ProtoReflect.Descriptor instead.
func (*ItemConf_Enhancement) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ItemConf_Enhancement) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemConf_Enhancement) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ItemConf_Enhancement) GetTips() []string {
	if x != nil {
		return x.Tips
	}
	return nil
}

type ItemConf_Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ItemConf_Cost) Reset() {
	*x = ItemConf_Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf_Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf_Cost) ProtoMessage() {}

func (x *ItemConf_Cost) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf_Cost.ProtoReflect.Descriptor instead.
func (*ItemConf_Cost) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ItemConf_Cost) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ItemConf_Cost) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ActivityConf_Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChapterMap map[int32]*ActivityConf_Chapter `protobuf:"bytes,2,rep,name=chapter_map,json=chapterMap,proto3" json:"chapter_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ActivityConf_Activity) Reset() {
	*x = ActivityConf_Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityConf_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityConf_Activity) ProtoMessage() {}

func (x *ActivityConf_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityConf_Activity.ProtoReflect.Descriptor instead.
func (*ActivityConf_Activity) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ActivityConf_Activity) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityConf_Activity) GetChapterMap() map[int32]*ActivityConf_Chapter {
	if x != nil {
		return x.ChapterMap
	}
	return nil
}

type ActivityConf_Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// repeated Section sections = 3 [(tableau.field).layout = tableau.LAYOUT_VERTICAL];
	Sections []*ActivityConf_Section `protobuf:"bytes,3,rep,name=sections,proto3" json:"sections,omitempty"`
}

func (x *ActivityConf_Chapter) Reset() {
	*x = ActivityConf_Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityConf_Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityConf_Chapter) ProtoMessage() {}

func (x *ActivityConf_Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityConf_Chapter.ProtoReflect.Descriptor instead.
func (*ActivityConf_Chapter) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ActivityConf_Chapter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityConf_Chapter) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ActivityConf_Chapter) GetSections() []*ActivityConf_Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

type ActivityConf_Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Desc      string               `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Items     []*Item              `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
	BeginTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime   *timestamp.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Duration  *duration.Duration   `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ActivityConf_Section) Reset() {
	*x = ActivityConf_Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityConf_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityConf_Section) ProtoMessage() {}

func (x *ActivityConf_Section) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityConf_Section.ProtoReflect.Descriptor instead.
func (*ActivityConf_Section) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{1, 3}
}

func (x *ActivityConf_Section) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityConf_Section) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ActivityConf_Section) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ActivityConf_Section) GetBeginTime() *timestamp.Timestamp {
	if x != nil {
		return x.BeginTime
	}
	return nil
}

func (x *ActivityConf_Section) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ActivityConf_Section) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type EnvConf_Basic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int32  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content  string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Valuable bool   `protobuf:"varint,4,opt,name=valuable,proto3" json:"valuable,omitempty"`
}

func (x *EnvConf_Basic) Reset() {
	*x = EnvConf_Basic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvConf_Basic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvConf_Basic) ProtoMessage() {}

func (x *EnvConf_Basic) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvConf_Basic.ProtoReflect.Descriptor instead.
func (*EnvConf_Basic) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{2, 1}
}

func (x *EnvConf_Basic) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EnvConf_Basic) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EnvConf_Basic) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EnvConf_Basic) GetValuable() bool {
	if x != nil {
		return x.Valuable
	}
	return false
}

type MailConf_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      int32   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Title    string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content  string  `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	ItemList []*Item `protobuf:"bytes,4,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"` // default: [(tableau.field).name = "Item"];
}

func (x *MailConf_Row) Reset() {
	*x = MailConf_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_conf_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailConf_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailConf_Row) ProtoMessage() {}

func (x *MailConf_Row) ProtoReflect() protoreflect.Message {
	mi := &file_test_conf_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailConf_Row.ProtoReflect.Descriptor instead.
func (*MailConf_Row) Descriptor() ([]byte, []int) {
	return file_test_conf_proto_rawDescGZIP(), []int{3, 1}
}

func (x *MailConf_Row) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *MailConf_Row) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MailConf_Row) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MailConf_Row) GetItemList() []*Item {
	if x != nil {
		return x.ItemList
	}
	return nil
}

var File_test_conf_proto protoreflect.FileDescriptor

var file_test_conf_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61,
	0x75, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x09,
	0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x1a,
	0x08, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0x49, 0x44, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x70, 0x1a, 0x4e, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0xb2, 0x04, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0xe9, 0x81,
	0x93, 0xe5, 0x85, 0xb7, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06,
	0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08,
	0x0a, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x25,
	0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x06, 0x69,
	0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0xe5, 0xb1, 0x9e, 0xe6, 0x80,
	0xa7, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a,
	0x08, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x2e,
	0x52, 0x6f, 0x77, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x0a, 0x0c, 0xe5, 0x94, 0xae, 0xe5, 0x8d, 0x96, 0xe9, 0x80,
	0x89, 0xe9, 0xa1, 0xb9, 0x10, 0x19, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x2e, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x0a, 0x0c, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x10, 0x18, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x4f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x82,
	0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe5, 0xa4, 0x9a, 0xe4, 0xb9,
	0x85, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x53,
	0x61, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc1, 0x02, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b,
	0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0xe5, 0xbc, 0xba, 0xe5,
	0x8c, 0x96, 0x52, 0x0c, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x58, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x0a,
	0x06, 0xe6, 0x8a, 0x91, 0xe5, 0x88, 0xb6, 0x1a, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20,
	0x02, 0x52, 0x07, 0x63, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x4f, 0x0a, 0x0c, 0x43, 0x6f,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x6f, 0x73, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x0b, 0x45,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x0a, 0x0c, 0xe6, 0x8f, 0x90, 0xe7,
	0xa4, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x10, 0x18, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73,
	0x1a, 0x4c, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a,
	0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0e,
	0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x28, 0x04, 0x22, 0xa7,
	0x07, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x56, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a,
	0x1a, 0x08, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0x49, 0x44, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x1a, 0x5b, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe0, 0x01, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x82,
	0xb5, 0x18, 0x0a, 0x0a, 0x08, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x59, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x1a, 0x05, 0xe7, 0xab, 0xa0, 0x49, 0x44,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x1a, 0x59, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8b, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0xe7, 0xab, 0xa0, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09, 0xe7, 0xab, 0xa0, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x20, 0x01, 0x52, 0x08, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xe0, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0x82,
	0xb5, 0x18, 0x07, 0x0a, 0x05, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x82, 0xb5,
	0x18, 0x0b, 0x0a, 0x09, 0xe8, 0x8a, 0x82, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c,
	0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7,
	0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e,
	0x0a, 0x0c, 0xe6, 0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe5, 0xa4, 0x9a, 0xe4, 0xb9, 0x85, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xac, 0x05, 0x0a, 0x07, 0x45, 0x6e, 0x76,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x28, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x07, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x49, 0x44, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x06, 0x7a,
	0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0x82, 0xb5,
	0x18, 0x0e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x82, 0xb5,
	0x18, 0x08, 0x0a, 0x06, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x61, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x17, 0x82, 0xb5, 0x18,
	0x13, 0x0a, 0x0f, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe7, 0x9a, 0x84, 0xe9, 0x81, 0x93, 0xe5,
	0x85, 0xb7, 0x10, 0x19, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x69, 0x63, 0x31, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x15, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0d,
	0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x31, 0x10, 0x1a, 0x52,
	0x06, 0x62, 0x61, 0x73, 0x69, 0x63, 0x31, 0x12, 0x42, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x15, 0x82, 0xb5,
	0x18, 0x11, 0x0a, 0x0d, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x32, 0x10, 0x1a, 0x52, 0x06, 0x62, 0x61, 0x73, 0x69, 0x63, 0x32, 0x12, 0x22, 0x0a, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08,
	0x0a, 0x06, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x2c, 0x0a, 0x0a, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0xe7, 0xb3, 0xbb, 0xe6, 0x95,
	0xb0, 0x52, 0x0a, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x40, 0x0a,
	0x12, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x69, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x0b, 0x82, 0xb5, 0x18, 0x07,
	0x0a, 0x03, 0x45, 0x6e, 0x76, 0x30, 0x01, 0x22, 0x90, 0x02, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x1a, 0x4e, 0x0a, 0x0c,
	0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x52, 0x6f,
	0x77, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x03,
	0x52, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x0a,
	0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x3a, 0x5a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x65, 0x6e, 0x63, 0x68, 0x79, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09, 0x54, 0x65, 0x73,
	0x74, 0x2e, 0x78, 0x6c, 0x73, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_conf_proto_rawDescOnce sync.Once
	file_test_conf_proto_rawDescData = file_test_conf_proto_rawDesc
)

func file_test_conf_proto_rawDescGZIP() []byte {
	file_test_conf_proto_rawDescOnce.Do(func() {
		file_test_conf_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_conf_proto_rawDescData)
	})
	return file_test_conf_proto_rawDescData
}

var file_test_conf_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_test_conf_proto_goTypes = []interface{}{
	(*ItemConf)(nil),              // 0: test.ItemConf
	(*ActivityConf)(nil),          // 1: test.ActivityConf
	(*EnvConf)(nil),               // 2: test.EnvConf
	(*MailConf)(nil),              // 3: test.MailConf
	nil,                           // 4: test.ItemConf.ItemMapEntry
	(*ItemConf_Row)(nil),          // 5: test.ItemConf.Row
	(*ItemConf_Attribute)(nil),    // 6: test.ItemConf.Attribute
	(*ItemConf_Enhancement)(nil),  // 7: test.ItemConf.Enhancement
	(*ItemConf_Cost)(nil),         // 8: test.ItemConf.Cost
	nil,                           // 9: test.ItemConf.Row.SaleMapEntry
	nil,                           // 10: test.ItemConf.Attribute.CostMapEntry
	nil,                           // 11: test.ActivityConf.ActivityMapEntry
	(*ActivityConf_Activity)(nil), // 12: test.ActivityConf.Activity
	(*ActivityConf_Chapter)(nil),  // 13: test.ActivityConf.Chapter
	(*ActivityConf_Section)(nil),  // 14: test.ActivityConf.Section
	nil,                           // 15: test.ActivityConf.Activity.ChapterMapEntry
	nil,                           // 16: test.EnvConf.NewbieItemMapEntry
	(*EnvConf_Basic)(nil),         // 17: test.EnvConf.Basic
	nil,                           // 18: test.MailConf.MailMapEntry
	(*MailConf_Row)(nil),          // 19: test.MailConf.Row
	(*timestamp.Timestamp)(nil),   // 20: google.protobuf.Timestamp
	(*duration.Duration)(nil),     // 21: google.protobuf.Duration
	(*Item)(nil),                  // 22: test.Item
}
var file_test_conf_proto_depIdxs = []int32{
	4,  // 0: test.ItemConf.item_map:type_name -> test.ItemConf.ItemMapEntry
	11, // 1: test.ActivityConf.activity_map:type_name -> test.ActivityConf.ActivityMapEntry
	16, // 2: test.EnvConf.newbie_item_map:type_name -> test.EnvConf.NewbieItemMapEntry
	17, // 3: test.EnvConf.basic1:type_name -> test.EnvConf.Basic
	17, // 4: test.EnvConf.basic2:type_name -> test.EnvConf.Basic
	18, // 5: test.MailConf.mail_map:type_name -> test.MailConf.MailMapEntry
	5,  // 6: test.ItemConf.ItemMapEntry.value:type_name -> test.ItemConf.Row
	6,  // 7: test.ItemConf.Row.attributes:type_name -> test.ItemConf.Attribute
	9,  // 8: test.ItemConf.Row.sale_map:type_name -> test.ItemConf.Row.SaleMapEntry
	20, // 9: test.ItemConf.Row.expiry_time:type_name -> google.protobuf.Timestamp
	21, // 10: test.ItemConf.Row.duration:type_name -> google.protobuf.Duration
	7,  // 11: test.ItemConf.Attribute.enhancements:type_name -> test.ItemConf.Enhancement
	10, // 12: test.ItemConf.Attribute.cost_map:type_name -> test.ItemConf.Attribute.CostMapEntry
	8,  // 13: test.ItemConf.Attribute.CostMapEntry.value:type_name -> test.ItemConf.Cost
	12, // 14: test.ActivityConf.ActivityMapEntry.value:type_name -> test.ActivityConf.Activity
	15, // 15: test.ActivityConf.Activity.chapter_map:type_name -> test.ActivityConf.Activity.ChapterMapEntry
	14, // 16: test.ActivityConf.Chapter.sections:type_name -> test.ActivityConf.Section
	22, // 17: test.ActivityConf.Section.items:type_name -> test.Item
	20, // 18: test.ActivityConf.Section.begin_time:type_name -> google.protobuf.Timestamp
	20, // 19: test.ActivityConf.Section.end_time:type_name -> google.protobuf.Timestamp
	21, // 20: test.ActivityConf.Section.duration:type_name -> google.protobuf.Duration
	13, // 21: test.ActivityConf.Activity.ChapterMapEntry.value:type_name -> test.ActivityConf.Chapter
	19, // 22: test.MailConf.MailMapEntry.value:type_name -> test.MailConf.Row
	22, // 23: test.MailConf.Row.item_list:type_name -> test.Item
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_test_conf_proto_init() }
func file_test_conf_proto_init() {
	if File_test_conf_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_test_conf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf_Enhancement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf_Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityConf_Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityConf_Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityConf_Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvConf_Basic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_conf_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailConf_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_conf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_conf_proto_goTypes,
		DependencyIndexes: file_test_conf_proto_depIdxs,
		MessageInfos:      file_test_conf_proto_msgTypes,
	}.Build()
	File_test_conf_proto = out.File
	file_test_conf_proto_rawDesc = nil
	file_test_conf_proto_goTypes = nil
	file_test_conf_proto_depIdxs = nil
}
